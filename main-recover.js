!function(I,n){"object"==typeof exports&&"object"==typeof module?module.exports=n(require("rxui"),require("React")):"function"==typeof define&&define.amd?define(["rxui","React"],n):"object"==typeof exports?exports.xgCompilerWeb=n(require("rxui"),require("React")):I.xgCompilerWeb=n(I.rxui,I.React)}(this,(function(__WEBPACK_EXTERNAL_MODULE__0__,__WEBPACK_EXTERNAL_MODULE__2__){return function(I){var n={};function g(t){if(n[t])return n[t].exports;var C=n[t]={i:t,l:!1,exports:{}};return I[t].call(C.exports,C,C.exports,g),C.l=!0,C.exports}return g.m=I,g.c=n,g.d=function(I,n,t){g.o(I,n)||Object.defineProperty(I,n,{enumerable:!0,get:t})},g.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},g.t=function(I,n){if(1&n&&(I=g(I)),8&n)return I;if(4&n&&"object"==typeof I&&I&&I.__esModule)return I;var t=Object.create(null);if(g.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:I}),2&n&&"string"!=typeof I)for(var C in I)g.d(t,C,function(n){return I[n]}.bind(null,C));return t},g.n=function(I){var n=I&&I.__esModule?function(){return I.default}:function(){return I};return g.d(n,"a",n),n},g.o=function(I,n){return Object.prototype.hasOwnProperty.call(I,n)},g.p="",g(g.s=24)}([function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__0__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL3hnQ29tcGlsZXJXZWIvZXh0ZXJuYWwgXCJyeHVpXCI/M2ZiOCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){eval("var api = __webpack_require__(3);\n            var content = __webpack_require__(23);\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.i, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL3hnQ29tcGlsZXJXZWIvLi9zcmMvc2tpbi5sZXNzP2NhZTYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS02LTEhLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc2tpbi5sZXNzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n")},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE__2__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL3hnQ29tcGlsZXJXZWIvZXh0ZXJuYWwge1wiY29tbW9uanNcIjpcIlJlYWN0XCIsXCJjb21tb25qczJcIjpcIlJlYWN0XCIsXCJhbWRcIjpcIlJlYWN0XCIsXCJyb290XCI6XCJSZWFjdFwifT81MDc0Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMl9fOyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : undefined;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && typeof btoa !== 'undefined') {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return "@media ".concat(item[2], " {").concat(content, "}");\n      }\n\n      return content;\n    }).join(\'\');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === \'string\') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, \'\']];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || \'\'; // eslint-disable-next-line prefer-destructuring\n\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === \'function\') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return "/*# sourceURL=".concat(cssMapping.sourceRoot || \'\').concat(source, " */");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join(\'\\n\');\n  }\n\n  return [content].join(\'\\n\');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n  return "/*# ".concat(data, " */");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL3hnQ29tcGlsZXJXZWIvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzI0ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG5cbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgJycpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gIHJldHVybiBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG59Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n')},function(module,exports,__webpack_require__){eval("var api = __webpack_require__(3);\n            var content = __webpack_require__(21);\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.i, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL3hnQ29tcGlsZXJXZWIvLi4vY29tbGliL3NyYy9mb3IvZm9yLmxlc3M/YWEyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9jb21waWxlci13ZWIvbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9jb21waWxlci13ZWIvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tNi0xIS4uLy4uLy4uL2NvbXBpbGVyLXdlYi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi9mb3IubGVzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n")},function(module,exports,__webpack_require__){eval('!function(t,e){if(true)module.exports=e();else { var o, n; }}(this,(function(){return function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(module,exports,__webpack_require__){var e;e=function(){return function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(module,exports,__webpack_require__){var e;e=function(){return function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=9)}([function(t,e,n){"use strict";function o(t,e){if(!i(t,e))throw new Error("Invalid item type")}function i(t,e){return t&&"object"==typeof t&&t._type==e}function r(){let t="abcdefhijkmnprstwxyz",e=t.length,n="";for(let o=0;o<6;o++)n+=t.charAt(Math.floor(Math.random()*e));return"u_"+n}var u;n.d(e,"b",(function(){return o})),n.d(e,"c",(function(){return i})),n.d(e,"d",(function(){return r})),n.d(e,"a",(function(){return u})),function(t){t.each=function(t,...e){e.forEach(e=>{e&&e.forEach(t)})},t.find=function(t,...e){let n;return e.find(e=>{if(e)return n=e.find(e=>t(e))}),n}}(u||(u={}))},function(t,e,n){"use strict";var o;n.d(e,"a",(function(){return o})),function(t){t[t.FRAME=0]="FRAME",t[t.NODE=1]="NODE",t[t.PIN=2]="PIN",t[t.JOINT=3]="JOINT",t[t.CONNECTION=4]="CONNECTION"}(o||(o={}))},function(t,e,n){"use strict";n.d(e,"d",(function(){return d})),n.d(e,"b",(function(){return l})),n.d(e,"c",(function(){return _})),n.d(e,"a",(function(){return m}));var o=n(1),i=n(0),r=n(8),u=n(3);let s,c,p,f=null,a="stop";function d(){return"running"===a}let l={},_={};function m(t,e,n="runtime"){return Object(i.b)(t,o.a.FRAME),Object(r.a)(t,e,n),f={on(t,e){t&&"string"==typeof t&&"function"==typeof e&&(_[t.toLowerCase()]=e)},run(e=t,n){if("stop"===a&&Object(u.c)(),function(t){return Object.assign(l,t||{}),c=[],p=[],!0}(n))return function(){function t(t){try{t.exe&&t.exe()}catch(t){_.error?_.error(t):console.error(t)}e(s)}function e(n){if("stop"==a||n!==s)return;let o;"pause"==a&&setTimeout(e,1e3),p.length>0?o=p.shift():c.length>0&&(o=c.shift()),o?l.debug?setTimeout(()=>{t(o)},o.debugSleep):"number"==typeof o.sleep&&o.sleep>-1?setTimeout(()=>{t(o)},0):t(o):setTimeout(t=>e(n))}a="running",s=Object(i.d)(),e(s),new Promise((t,e)=>{})}(),t=>{e._exe(void 0,t,void 0,"input",!0)}},pause:h,stop(){const t=(a="stop",!0);return f=null,c=void 0,p=void 0,Object(u.d)(),t}}}function h(){return a="pause",!0}},function(t,e,n){"use strict";n.d(e,"a",(function(){return r})),n.d(e,"b",(function(){return u})),n.d(e,"c",(function(){return s})),n.d(e,"d",(function(){return c}));var o=n(0);let i;function r(t,e){const n=function t(e,n,i,r){let u={id:Object(o.d)(),instId:n,hostId:i,path:void 0,parent:e,returnParams:{},resolve:null,comInsts:{},applyScope(e,n,o,i){const r=t(u,e,o,i);let s=u.comInsts[e];return s&&(!s.scopes&&(s.scopes=[]),s.scopes.push(r)),p(e,o,r),r}};if(r)u.path=u.id;else{const t=[u.id];let e=u.parent;for(;e;)e.parent&&t.push(e.id),e=e.parent;u.path=t.reverse().join(":")}return u}(void 0,t,e);return p(t,e,n),n}function u(t,e){var n;return null===(n=i[t])||void 0===n?void 0:n[e]}function s(){i={}}function c(){i={}}function p(t,e,n){let o=i[t];o||(i[t]=o={}),o[e]=n}},function(t,e,n){"use strict";n.d(e,"a",(function(){return c}));var o=n(0),i=n(7),r=n(1),u=n(3),s=n(2);function c(t,e,n="runtime"){t.conAry&&t.conAry.forEach(t=>{Object(i.a)(t)}),t._exe=function(i,c,p,f){if(!Object(s.d)())return;s.c.execute&&s.c.execute(r.a.PIN,t.id,c);let a=i;if(!a)if(Object(o.c)(t.parent,r.a.NODE)){const e=t.parent.parent;a=Object(u.b)(!e._exeAsRoot_&&e.parent?e.parent.runtime.id:void 0,e.id)}else if(Object(o.c)(t.parent,r.a.FRAME)){const e=t.parent;a=Object(u.b)(!e._exeAsRoot_&&e.parent?e.parent.runtime.id:void 0,e.id)}let d=e.pin?e.pin(t):void 0;if(d&&!1===d.exe(c,f))return;const l=e=>{d&&d.exe(e,t,"返回"),"function"==typeof p&&p(e)};if("input"==t.direction)t.proxyPin&&t.proxyPin._exe?t.proxyPin.parent._exe(a,{[t.hostId]:c},void 0,t.direction):t.parent._exe(a,void 0,{[t.hostId]:c},l);else if("inner-input"===t.direction){if(!t.proxyPin||!t.proxyPin._exe)return;t.proxyPin._exe(a.parent,c,l,f)}else if("output"==t.direction||"inner-output"==t.direction)if(t.proxyPin&&t.proxyPin._exe)t.proxyPin._exe(i.parent,c,l,f);else{let e;"mock"===n&&t.mockData&&(e=t.mockData),t.conAry&&t.conAry.length>0&&t.conAry.forEach((n,o)=>{let i;l&&(void 0!==e?l(JSON.parse(t.mockData)):i=function(t){l(t)}),n._exe(a,c,i,t)})}}}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o="UNDEFINED_FRAME_LABEL"},function(t,e,n){"use strict";var o=n(9);n.d(e,"b",(function(){return o.isTypeof}));var i=n(5);n.d(e,"a",(function(){return i.a}))},function(t,e,n){"use strict";n.d(e,"a",(function(){return u}));var o=n(2),i=n(1),r=n(6);function u(t){let e=t;e._exe||(e._exe=function(n,u,s,c){if(!Object(o.d)())return;const p=t.finishPin.forkedFrom||t.finishPin;if("function"!=typeof p._exe){const n=Object(r.b)(t.startPin.parent,i.a.NODE)?t.startPin.parent:void 0;throw new Error(`连接(来自:${n?n.runtime.title:"未知组件"}，${e.title})已断开.`)}o.b.debug&&o.b.debug.stepTime,p._exe(n,u,s,c)})}},function(t,e,n){"use strict";n.d(e,"a",(function(){return f}));var o=n(5),i=n(10),r=n(4),u=n(7);let s=new WeakMap;function c(t,e,n="runtime"){const o=t.parent.parent.runtime;t.from?Object(u.a)(t.from):console.warn(`组件(${o.title},${o.def.namespace})存在连接断开.`),t.to?Object(u.a)(t.to):console.warn(`组件(${o.title},${o.def.namespace})存在连接断开.`),t._exe=function(n,o,i){const r=e.joint?e.joint(t):void 0,u=t.parent.parent;if("input"==t.type){let e=n.comInsts[u.runtime.id].scopes.find(e=>e.hostId===t.parent.id);const c=e=>{r&&r.exe(o),t.to&&t.to._exe(e,o,i,t.type)};if(e){let t=e.hostId;e.parent.comInsts[u.runtime.id].scopes.forEach(e=>{e.hostId==t&&c(e)})}else{let e=s.get(t);e||s.set(t,e=new WeakMap);let o=e.get(n);o||e.set(n,o=[]),o.push(c)}}else r&&"function"==typeof r.exe&&r.exe(o),t.to&&t.to._exe(n.parent,o,i,t.type)}}var p=n(3);function f(t,e,n="runtime"){t.comAry&&t.comAry.forEach(t=>{Object(i.a)(t,e,n)}),t.inputPins&&t.inputPins.forEach(t=>Object(r.a)(t,e,n)),t.outputPins&&t.outputPins.forEach(t=>Object(r.a)(t,e,n)),t.inputJoints&&t.inputJoints.forEach(t=>c(t,e,n)),t.outputJoints&&t.outputJoints.forEach(t=>c(t,e,n));const u=t,f={};u._exe=function(e,i,r=o.a,c,a){if(!e){if(t.parent){const n=Object(p.b)(t.parent?t.parent.runtime.id:t.id,t.id);n&&(e=n.parent)}e||(e=Object(p.a)(void 0,t.id+"-parent"))}const d=r+e.id;if(!f[d]){let n,i;if(u._exeAsRoot_=!!a,r=void 0!==r?r:o.a,u._exeAsRoot_)n={inst:void 0,scopes:[]};else if(n=e.comInsts[t.parent.runtime.id],!n&&t._rootF)return;"input"==(c="string"==typeof c?c:"input")&&(i=e.applyScope(!u._exeAsRoot_&&t.parent?t.parent.runtime.id:void 0,r,t.id,t._rootF),t.comAry.forEach(t=>{t._exe(i,r,void 0,void 0)})),f[d]={myInstScope:n,curScope:i}}const{myInstScope:l,curScope:_}=f[d];if("input"==(c="string"==typeof c?c:"input")){const e={};if("mock"===n&&t.inputPins.length>0&&t.inputPins.forEach(t=>{t.mockData&&(e[t.hostId]=t.mockData)}),i=Object.assign(e,i))for(let e in i){const n=t.inputPins.find(t=>t.hostId==e);n?n._exe(_,i[e],void 0):"undefined"!=typeof console&&"function"==typeof console.error&&console.error(`No inputPin(id=${e}) found`)}return t.inputJoints&&t.inputJoints.forEach(t=>{!function(t,e){let n=e.parent,o=s.get(t);if(o){let t=o.get(n);t&&t.forEach(t=>{t(e)})}}(t,_)}),_}if(c.match(/^(output)|(inner-input)$/gi)){let e=_;if(t.outputPins.length){if(i)for(let t in i)e.returnParams[t]=i[t]||null;t.outputPins.find(t=>null==e.returnParams[t.hostId])||e.resolve()}}}}},function(t,e,n){"use strict";n.r(e),n.d(e,"compile",(function(){return o.a})),n.d(e,"createIO",(function(){return r})),n.d(e,"E_ItemType",(function(){return u.a})),n.d(e,"isTypeof",(function(){return i.c}));var o=n(2),i=n(0);function r(t,e){const n={_all:{},_waiting:{},set(t,e){this._all[t]=e;const n=this._waiting[t];if(n)try{n.forEach(t=>{e(t)}),delete this._waiting[t]}finally{}return!0},get(t){return this._all[t]},waiting(t,e){let n=this._waiting[t];n||(n=this._waiting[t]=[]),n.push(e)}},o={};return{inputs:new Proxy({},{ownKeys(e){const n=[];return i.a.each(t=>{n.push(t.hostId)},t.inputPins,t.inputPinsInModel),n},getOwnPropertyDescriptor:t=>({enumerable:!0,configurable:!0}),get:(t,e,i)=>function(t){n.set(e,(function(n){const i=o[e];if(void 0!==n&&i){o[e]=void 0;const[i,r]=n;t(i,(function(t){"function"==typeof r&&r(t)}))}}))},set(t,i,r,u){o[i]=r;const s=n.get(i);return s?((null==e?void 0:e.input)&&e.input(),s(r)):n.waiting(i,r),!0}}),outputs:new Proxy({},{ownKeys(e){const n=[];return i.a.each(t=>{n.push(t.hostId)},t.outputPins,t.outputPinsInModel),n},getOwnPropertyDescriptor:t=>({enumerable:!0,configurable:!0}),get(n,o,r){let u;return function(n,r){if(t.outputPins){u=r;const s=function(t){"function"==typeof u&&u(t)},c=i.a.find(({hostId:t})=>o==t,t.outputPins,t.outputPinsInModel);if(!c)throw new Error(`No output(hostId=${o}) found.`);setTimeout(()=>{(null==e?void 0:e.output)&&e.output(n),c._exe(null,n,s,t)})}}}})}}var u=n(1)},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return compile}));var _index__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(6),_Frame__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(8),_Pin__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(4),_util__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(0);function compile(node,opts,mode="runtime"){_util__WEBPACK_IMPORTED_MODULE_3__.a.each(t=>Object(_Pin__WEBPACK_IMPORTED_MODULE_2__.a)(t,opts,mode),node.inputPins,node.inputPinExts,node.inputPinsInModel),_util__WEBPACK_IMPORTED_MODULE_3__.a.each(t=>Object(_Pin__WEBPACK_IMPORTED_MODULE_2__.a)(t,opts,mode),node.outputPins,node.inputPinExts,node.outputPinsInModel);const nodeRunnable=node,nodeOpts=opts.node(node),rendered={};let runtimeScriptFn;function render(t,e=_index__WEBPACK_IMPORTED_MODULE_0__.a){if("function"!=typeof nodeOpts.render)throw new Error("Render config function for node not found.");const n=t.path,o={};node.frames&&node.frames.forEach(e=>{o[e.id]=function(n,o=_index__WEBPACK_IMPORTED_MODULE_0__.a){const i=e._exe(t,n,o);if(i)return i.path}});const i={inst:nodeOpts.render(n,e,o),scopes:[]};t.comInsts[node.runtime.id]=i}nodeRunnable._exe=function(scope,frameLable,params,callback){let debugParams;_util__WEBPACK_IMPORTED_MODULE_3__.a.each(t=>{void 0!==t.dummyData&&(!debugParams&&(debugParams={}),debugParams[t.hostId]=t.dummyData)},node.inputPins,node.inputPinsInModel),params=debugParams?Object.assign(debugParams,params):params,rendered[scope.id]||(render(scope,frameLable),rendered[scope.id]=!0);const instDesc=scope.comInsts[node.runtime.id];if(params)for(let t in params){const e=params[t];instDesc.inst.inputs[t]=[e,callback]}nodeOpts.exe&&nodeOpts.exe(instDesc.inst,params,callback);const rtScript=node.runtime.model.script;if(rtScript)if("js"===rtScript.type){if(!runtimeScriptFn){const script=rtScript.content,sc=unescape(script);try{runtimeScriptFn=eval(sc)}catch(t){throw new Error(`组件[${node.def.namespace}] 脚本发生错误:${t.message}\\n            ${sc}`)}}runtimeScriptFn(instDesc.inst.inputs,instDesc.inst.outputs,opts.envVars)}else if("extComponent"===rtScript.type){const extDef=node.runtime.def.extension;if(opts.extComDef&&!runtimeScriptFn){let extComDef;const extDesc=opts.extComDef.find(t=>t.pointId===extDef.pointId);if(extDesc&&extDesc.comAry&&(extComDef=extDesc.comAry.find(t=>t.id===extDef.instId),!extComDef))throw new Error(`No extComponent(id=${extDef.instId}) defined found.`);const script=rtScript.content;try{runtimeScriptFn=eval(script)(extComDef,node.runtime.model.data),runtimeScriptFn(instDesc.inst.inputs,instDesc.inst.outputs,opts.envVars)}catch(t){throw new Error(`ExtComponent(${extComDef.title}) script error:${t.message}\\n                  ${script}`)}}}else if("jsEval"===rtScript.type){if(!runtimeScriptFn){const script=rtScript.content,sc=script;try{runtimeScriptFn=eval(sc)(node.runtime.model)}catch(t){throw new Error(`组件[${node.def.namespace}] 脚本发生错误:${t.message}\\n            ${sc}`)}}runtimeScriptFn(instDesc.inst.inputs,instDesc.inst.outputs,opts.envVars)}else if("extPoint"===rtScript.type){const t=rtScript.content;if(t&&opts.extComDef){const e=opts.extComDef.find(e=>e.id===t);if(!e)throw new Error(`No controlPoint(id=${t}) found.`);const n=function(n,o){Object.keys(n).forEach(o=>{n[o](n=>{if(e.inputs){const i=e.inputs.find(t=>t.id===o);if(!i)throw new Error(`No input(id=${o}) defined in extPoint(id=${t}) found.`);i.exe({data:rtScript.data},n)}})}),Object.keys(o).forEach(n=>{o[n](o=>{if(e.outputs){const i=e.outputs.find(t=>t.id===n);if(!i)throw new Error(`No output(id=${n}) defined in extPoint(id=${t}) found.`);i.exe({data:rtScript.data},o)}})})};n(instDesc.inst.inputs,instDesc.inst.outputs)}}},node.frames&&node.frames.forEach(t=>{Object(_Frame__WEBPACK_IMPORTED_MODULE_1__.a)(t,opts)})}}])},module.exports=e()},function(t,e,n){"use strict";var o,i;function r(t,e){return t&&"object"==typeof t&&t._type==e}function u(){let t="abcdefhijkmnprstwxyz",e=t.length,n="";for(let o=0;o<6;o++)n+=t.charAt(Math.floor(Math.random()*e));return"u_"+n}n.r(e),n.d(e,"compile",(function(){return w})),n.d(e,"createIO",(function(){return A})),n.d(e,"E_ItemType",(function(){return o})),n.d(e,"isTypeof",(function(){return r})),function(t){t[t.FRAME=0]="FRAME",t[t.NODE=1]="NODE",t[t.PIN=2]="PIN",t[t.JOINT=3]="JOINT",t[t.CONNECTION=4]="CONNECTION"}(o||(o={})),function(t){t.each=function(t,...e){e.forEach(e=>{e&&e.forEach(t)})},t.find=function(t,...e){let n;return e.find(e=>{if(e)return n=e.find(e=>t(e))}),n}}(i||(i={}));var s=n(0);function c(t){let e=t;e._exe||(e._exe=function(n,i,r,u){if(!b())return;const c=t.finishPin.forkedFrom||t.finishPin;if("function"!=typeof c._exe){const n=Object(s.isTypeof)(t.startPin.parent,o.NODE)?t.startPin.parent:void 0;throw new Error(`连接(来自:${n?n.runtime.title:"未知组件"}，${e.title})已断开.`)}I.debug&&I.debug.stepTime,c._exe(n,i,r,u)})}let p;function f(t,e){const n=function t(e,n,o,i){let r={id:u(),instId:n,hostId:o,path:void 0,parent:e,returnParams:{},resolve:null,comInsts:{},applyScope(e,n,o,i){const u=t(r,e,o,i);let s=r.comInsts[e];return s&&(!s.scopes&&(s.scopes=[]),s.scopes.push(u)),d(e,o,u),u}};if(i)r.path=r.id;else{const t=[r.id];let e=r.parent;for(;e;)e.parent&&t.push(e.id),e=e.parent;r.path=t.reverse().join(":")}return r}(void 0,t,e);return d(t,e,n),n}function a(t,e){var n;return null===(n=p[t])||void 0===n?void 0:n[e]}function d(t,e,n){let o=p[t];o||(p[t]=o={}),o[e]=n}function l(t,e,n="runtime"){t.conAry&&t.conAry.forEach(t=>{c(t)}),t._exe=function(i,u,s,c){if(!b())return;O.execute&&O.execute(o.PIN,t.id,u);let p=i;if(!p)if(r(t.parent,o.NODE)){const e=t.parent.parent;p=a(!e._exeAsRoot_&&e.parent?e.parent.runtime.id:void 0,e.id)}else if(r(t.parent,o.FRAME)){const e=t.parent;p=a(!e._exeAsRoot_&&e.parent?e.parent.runtime.id:void 0,e.id)}let f=e.pin?e.pin(t):void 0;if(f&&!1===f.exe(u,c))return;const d=e=>{f&&f.exe(e,t,"返回"),"function"==typeof s&&s(e)};if("input"==t.direction)t.proxyPin&&t.proxyPin._exe?t.proxyPin.parent._exe(p,{[t.hostId]:u},void 0,t.direction):t.parent._exe(p,void 0,{[t.hostId]:u},d);else if("inner-input"===t.direction){if(!t.proxyPin||!t.proxyPin._exe)return;t.proxyPin._exe(p.parent,u,d,c)}else if("output"==t.direction||"inner-output"==t.direction)if(t.proxyPin&&t.proxyPin._exe)t.proxyPin._exe(i.parent,u,d,c);else{let e;"mock"===n&&t.mockData&&(e=t.mockData),t.conAry&&t.conAry.length>0&&t.conAry.forEach((n,o)=>{let i;d&&(void 0!==e?d(JSON.parse(t.mockData)):i=function(t){d(t)}),n._exe(p,u,i,t)})}}}function _(t,e,n="runtime"){i.each(t=>l(t,e,n),t.inputPins,t.inputPinExts,t.inputPinsInModel),i.each(t=>l(t,e,n),t.outputPins,t.inputPinExts,t.outputPinsInModel);const o=t,r=e.node(t),u={};o._exe=function(e,n,o,s){let c;i.each(t=>{void 0!==t.dummyData&&(!c&&(c={}),c[t.hostId]=t.dummyData)},t.inputPins,t.inputPinsInModel),o=c?Object.assign(c,o):o,u[e.id]||(function(e,n="UNDEFINED_FRAME_LABEL"){if("function"!=typeof r.render)throw new Error("Render config function for node not found.");const o=e.path,i={};t.frames&&t.frames.forEach(t=>{i[t.id]=function(n,o="UNDEFINED_FRAME_LABEL"){const i=t._exe(e,n,o);if(i)return i.path}});const u={inst:r.render(o,n,i,e),scopes:[]};e.comInsts[t.runtime.id]=u}(e,n),u[e.id]=!0);const p=e.comInsts[t.runtime.id];if(o)for(let t in o){const e=o[t];p.inst.inputs[t]=[e,s]}r.exe&&r.exe(p.inst,o,s)},t.frames&&t.frames.forEach(t=>{y(t,e)})}let m=new WeakMap;function h(t,e,n="runtime"){const o=t.parent.parent.runtime;t.from?c(t.from):console.warn(`组件(${o.title},${o.def.namespace})存在连接断开.`),t.to?c(t.to):console.warn(`组件(${o.title},${o.def.namespace})存在连接断开.`),t._exe=function(n,o,i){const r=e.joint?e.joint(t):void 0,u=t.parent.parent;if("input"==t.type){let e=n.comInsts[u.runtime.id].scopes.find(e=>e.hostId===t.parent.id);const s=e=>{r&&r.exe(o),t.to&&t.to._exe(e,o,i,t.type)};if(e){let t=e.hostId;e.parent.comInsts[u.runtime.id].scopes.forEach(e=>{e.hostId==t&&s(e)})}else{let e=m.get(t);e||m.set(t,e=new WeakMap);let o=e.get(n);o||e.set(n,o=[]),o.push(s)}}else r&&"function"==typeof r.exe&&r.exe(o),t.to&&t.to._exe(n.parent,o,i,t.type)}}function y(t,e,n="runtime"){t.comAry&&t.comAry.forEach(t=>{_(t,e,n)}),t.inputPins&&t.inputPins.forEach(t=>l(t,e,n)),t.outputPins&&t.outputPins.forEach(t=>l(t,e,n)),t.inputJoints&&t.inputJoints.forEach(t=>h(t,e,n)),t.outputJoints&&t.outputJoints.forEach(t=>h(t,e,n));const o=t,i={};o._update=function(o,r,u="UNDEFINED_FRAME_LABEL"){const s=u+o.id,{curScope:c,coms:p}=i[s];t.comAry.forEach(t=>{p.push(t.runtime.id),"function"!=typeof t._exe&&(_(t,e,n),t._exe(c,u,void 0,void 0))})},o._exe=function(r,u,s="UNDEFINED_FRAME_LABEL",c,p){if(!r){if(t.parent){const e=a(t.parent?t.parent.runtime.id:t.id,t.id);e&&(r=e.parent)}r||(r=f(void 0,t.id+"-parent"))}const d=s+r.id;let l=!1;if(i[d]){const e=i[d].coms;(e.length!==t.comAry.length||t.comAry.find(t=>e.indexOf(t.runtime.id)<0))&&(l=!0)}if(!i[d]||l){let u,f;if(o._exeAsRoot_=!!p,s=void 0!==s?s:"UNDEFINED_FRAME_LABEL",o._exeAsRoot_)u={inst:void 0,scopes:[]};else if(u=r.comInsts[t.parent.runtime.id],!u&&t._rootF)return;const a=[];"input"==(c="string"==typeof c?c:"input")&&(f=r.applyScope(!o._exeAsRoot_&&t.parent?t.parent.runtime.id:void 0,s,t.id,t._rootF),t.comAry.forEach(t=>{a.push(t.runtime.id),"function"!=typeof t._exe&&_(t,e,n),t._exe(f,s,void 0,void 0)})),i[d]={myInstScope:u,curScope:f,coms:a}}const{curScope:h}=i[d];if("input"==(c="string"==typeof c?c:"input")){const e={};if("mock"===n&&t.inputPins.length>0&&t.inputPins.forEach(t=>{t.mockData&&(e[t.hostId]=t.mockData)}),u=Object.assign(e,u))for(let e in u){const n=t.inputPins.find(t=>t.hostId==e);n?n._exe(h,u[e],void 0,void 0):"undefined"!=typeof console&&"function"==typeof console.error&&console.error(`No inputPin(id=${e}) found`)}return t.inputJoints&&t.inputJoints.forEach(t=>{!function(t,e){let n=e.parent,o=m.get(t);if(o){let t=o.get(n);t&&t.forEach(t=>{t(e)})}}(t,h)}),h}if(c.match(/^(output)|(inner-input)$/gi)){let e=h;if(t.outputPins.length){if(u)for(let t in u)e.returnParams[t]=u[t]||null;t.outputPins.find(t=>null==e.returnParams[t.hostId])||e.resolve()}}}}let x,P,E,v=null,g="stop";function b(){return"running"===g}let I={},O={};function w(t,e,n="runtime"){return function(t,e){if(!r(t,e))throw new Error("Invalid item type")}(t,o.FRAME),y(t,e,n),v={on(t,e){t&&"string"==typeof t&&"function"==typeof e&&(O[t.toLowerCase()]=e)},run(e=t,n){if("stop"===g&&(p={}),function(t){return Object.assign(I,t||{}),P=[],E=[],!0}(n))return function(){function t(t){try{t.exe&&t.exe()}catch(t){O.error?O.error(t):console.error(t)}e(x)}function e(n){if("stop"==g||n!==x)return;let o;"pause"==g&&setTimeout(e,1e3),E.length>0?o=E.shift():P.length>0&&(o=P.shift()),o?I.debug?setTimeout(()=>{t(o)},o.debugSleep):"number"==typeof o.sleep&&o.sleep>-1?setTimeout(()=>{t(o)},0):t(o):setTimeout(t=>e(n))}g="running",x=u(),e(x),new Promise((t,e)=>{})}(),t=>e._exe(void 0,t,void 0,"input",!0)},update:(e,n=t)=>(n._update(e,void 0,void 0),!0),pause:D,stop(){const t=(g="stop",!0);return v=null,P=void 0,E=void 0,p={},t}}}function D(){return g="pause",!0}function A(t,e){const n={_all:{},_waiting:{},set(t,e){this._all[t]=e;const n=this._waiting[t];if(n)try{n.forEach(t=>{e(t)}),delete this._waiting[t]}finally{}return!0},get(t){return this._all[t]},waiting(t,e){let n=this._waiting[t];n||(n=this._waiting[t]=[]),n.push(e)}},o=u(),r={};return{inputs:new Proxy({},{ownKeys(e){const n=[];return i.each(t=>{n.push(t.hostId)},t.inputPins,t.inputPinsInModel),n},getOwnPropertyDescriptor:t=>({enumerable:!0,configurable:!0}),get:(t,e,i)=>"__id__"===e?o:function(t){n.set(e,(function(n){const o=r[e];if(void 0!==n&&o){r[e]=void 0;const[o,i]=n;t(o,(function(t){"function"==typeof i&&i(t)}))}}))},set(t,o,i,u){r[o]=i;const s=n.get(o);return s?((null==e?void 0:e.input)&&e.input(),s(i)):n.waiting(o,i),!0}}),outputs:new Proxy({},{ownKeys(e){const n=[];return i.each(t=>{n.push(t.hostId)},t.outputPins,t.outputPinsInModel),n},getOwnPropertyDescriptor:t=>({enumerable:!0,configurable:!0}),get(n,r,u){if("__id__"===r)return o;let s;return function(n,o){if(t.outputPins){s=o;const u=function(t){"function"==typeof s&&s(t)},c=i.find(({hostId:t})=>r==t,t.outputPins,t.outputPinsInModel);if(!c)throw new Error(`No output(hostId=${r}) found.`);Promise.resolve().then(()=>{(null==e?void 0:e.output)&&e.output(n),c._exe(null,n,u,t)})}}}})}}}])},module.exports=e()},function(t,e,n){"use strict";var o,i;function r(t,e){return t&&"object"==typeof t&&t._type==e}function u(){let t="abcdefhijkmnprstwxyz",e=t.length,n="";for(let o=0;o<6;o++)n+=t.charAt(Math.floor(Math.random()*e));return"u_"+n}n.r(e),n.d(e,"T_Scope",(function(){})),n.d(e,"compile",(function(){return D})),n.d(e,"createIO",(function(){return M})),n.d(e,"E_ItemType",(function(){return o})),n.d(e,"isTypeof",(function(){return r})),n.d(e,"UNDEFINED_FRAME_LABEL",(function(){return s})),function(t){t[t.FRAME=0]="FRAME",t[t.NODE=1]="NODE",t[t.PIN=2]="PIN",t[t.JOINT=3]="JOINT",t[t.CONNECTION=4]="CONNECTION"}(o||(o={})),function(t){t.each=function(t,...e){e.forEach(e=>{e&&e.forEach(t)})},t.find=function(t,...e){let n;return e.find(e=>{if(e)return n=e.find(e=>t(e))}),n}}(i||(i={}));const s="UNDEFINED_FRAME_LABEL";var c=n(0);function p(t){let e=t;e._exe||(e._exe=function(n,i,r,u){if(!I())return;const s=t.finishPin.forkedFrom||t.finishPin;if("function"!=typeof s._exe){const n=Object(c.isTypeof)(t.startPin.parent,o.NODE)?t.startPin.parent:void 0;throw new Error(`连接(来自:${n?n.runtime.title:"未知组件"}，${e.title})已断开.`)}O.debug&&O.debug.stepTime,s._exe(n,i,r,u)})}let f;function a(t,e){const n=function t(e,n,o,i){let r={id:u(),instId:n,hostId:o,path:void 0,parent:e,returnParams:{},resolve:null,comInsts:{},applyScope(e,n,o,i){const u=t(r,e,o,i);let s=r.comInsts[e];return s&&(!s.scopes&&(s.scopes=[]),s.scopes.push(u)),l(e,o,u),u}};if(i)r.path=r.id;else{const t=[r.id];let e=r.parent;for(;e;)e.parent&&t.push(e.id),e=e.parent;r.path=t.reverse().join(":")}return r}(void 0,t,e);return l(t,e,n),n}function d(t,e){var n;return null===(n=f[t])||void 0===n?void 0:n[e]}function l(t,e,n){let o=f[t];o||(f[t]=o={}),o[e]=n}function _(t,e,n="runtime"){t.conAry&&t.conAry.forEach(t=>{p(t)}),t._exe=function(i,u,s,c){if(!I())return;w.execute&&w.execute(o.PIN,t.id,u);let p=i;if(!p)if(r(t.parent,o.NODE)){const e=t.parent.parent;p=d(!e._exeAsRoot_&&e.parent?e.parent.runtime.id:void 0,e.id)}else if(r(t.parent,o.FRAME)){const e=t.parent;p=d(!e._exeAsRoot_&&e.parent?e.parent.runtime.id:void 0,e.id)}let f=e.pin?e.pin(t):void 0;if(f){if(!1===f.exe(u,c))return}const a=e=>{f&&f.exe(e,t,"返回"),"function"==typeof s&&s(e)};if("input"==t.direction)if(t.proxyPin&&t.proxyPin._exe){t.proxyPin.parent._exe(p,{[t.hostId]:u},void 0,t.direction)}else t.parent._exe(p,void 0,{[t.hostId]:u},a);else if("inner-input"===t.direction){if(!t.proxyPin||!t.proxyPin._exe)return;t.proxyPin._exe(p.parent,u,a,c)}else if("output"==t.direction||"inner-output"==t.direction)if(t.proxyPin&&t.proxyPin._exe)t.proxyPin._exe(i.parent,u,a,c);else{let e;"mock"===n&&t.mockData&&(e=t.mockData),t.conAry&&t.conAry.length>0&&t.conAry.forEach((n,o)=>{let i;a&&(void 0!==e?a(JSON.parse(t.mockData)):i=function(t){a(t)}),n._exe(p,u,i,t)})}}}function m(t,e,n="runtime"){i.each(t=>_(t,e,n),t.inputPins,t.inputPinExts,t.inputPinsInModel),i.each(t=>_(t,e,n),t.outputPins,t.inputPinExts,t.outputPinsInModel);const o=t,r=e.node(t),u={};o._exe=function(e,n,o,c){let p;i.each(t=>{void 0!==t.dummyData&&(!p&&(p={}),p[t.hostId]=t.dummyData)},t.inputPins,t.inputPinsInModel),o=p?Object.assign(p,o):o,u[e.id]||(!function(e,n=s){if("function"!=typeof r.render)throw new Error("Render config function for node not found.");const o=e.path,i={};t.frames&&t.frames.forEach(t=>{i[t.id]=function(n,o=s){const i=t._exe(e,n,o);if(i)return i.path}});const u={inst:r.render(o,n,i,e),scopes:[]};e.comInsts[t.runtime.id]=u}(e,n),u[e.id]=!0);const f=e.comInsts[t.runtime.id];if(o)for(let t in o){const e=o[t];f.inst.inputs[t]=[e,c]}r.exe&&r.exe(f.inst,o,c)},t.frames&&t.frames.forEach(t=>{x(t,e)})}let h=new WeakMap;function y(t,e,n="runtime"){const o=t.parent.parent.runtime;t.from?p(t.from):console.warn(`组件(${o.title},${o.def.namespace})存在连接断开.`),t.to?p(t.to):console.warn(`组件(${o.title},${o.def.namespace})存在连接断开.`);t._exe=function(n,o,i){const r=e.joint?e.joint(t):void 0,u=t.parent.parent;if("input"==t.type){let e=n.comInsts[u.runtime.id].scopes.find(e=>e.hostId===t.parent.id);const s=e=>{r&&r.exe(o),t.to&&t.to._exe(e,o,i,t.type)};if(e){let t=e.hostId;e.parent.comInsts[u.runtime.id].scopes.forEach(e=>{e.hostId==t&&s(e)})}else{let e=h.get(t);e||h.set(t,e=new WeakMap);let o=e.get(n);o||e.set(n,o=[]),o.push(s)}}else r&&"function"==typeof r.exe&&r.exe(o),t.to&&t.to._exe(n.parent,o,i,t.type)}}function x(t,e,n="runtime"){t.comAry&&t.comAry.forEach(t=>{m(t,e,n)}),t.inputPins&&t.inputPins.forEach(t=>_(t,e,n)),t.outputPins&&t.outputPins.forEach(t=>_(t,e,n)),t.inputJoints&&t.inputJoints.forEach(t=>y(t,e,n)),t.outputJoints&&t.outputJoints.forEach(t=>y(t,e,n));const o=t,i={};o._update=function(o,r,u=s){const c=u+o.id,{curScope:p,coms:f}=i[c];t.comAry.forEach(t=>{f.push(t.runtime.id),"function"!=typeof t._exe&&(m(t,e,n),t._exe(p,u,void 0,void 0))})},o._exe=function(r,u,c=s,p,f){if(!r){if(t.parent){const e=d(t.parent?t.parent.runtime.id:t.id,t.id);e&&(r=e.parent)}r||(r=a(void 0,t.id+"-parent"))}const l=c+r.id;let _=!1;if(i[l]){const e=i[l].coms;(e.length!==t.comAry.length||t.comAry.find(t=>e.indexOf(t.runtime.id)<0))&&(_=!0)}if(!i[l]||_){let u,a;if(o._exeAsRoot_=!!f,c=void 0!==c?c:s,o._exeAsRoot_)u={inst:void 0,scopes:[]};else if(u=r.comInsts[t.parent.runtime.id],!u&&t._rootF)return;const d=[];"input"==(p="string"==typeof p?p:"input")&&(a=r.applyScope(!o._exeAsRoot_&&t.parent?t.parent.runtime.id:void 0,c,t.id,t._rootF),t.comAry.forEach(t=>{d.push(t.runtime.id),"function"!=typeof t._exe&&m(t,e,n),t._exe(a,c,void 0,void 0)})),i[l]={myInstScope:u,curScope:a,coms:d}}const{curScope:y}=i[l];if("input"==(p="string"==typeof p?p:"input")){const e={};if("mock"===n&&t.inputPins.length>0&&t.inputPins.forEach(t=>{t.mockData&&(e[t.hostId]=t.mockData)}),u=Object.assign(e,u))for(let e in u){const n=t.inputPins.find(t=>t.hostId==e);n?n._exe(y,u[e],void 0,void 0):"undefined"!=typeof console&&"function"==typeof console.error&&console.error(`No inputPin(id=${e}) found`)}return t.inputJoints&&t.inputJoints.forEach(t=>{!function(t,e){let n=e.parent,o=h.get(t);if(o){let t=o.get(n);t&&t.forEach(t=>{t(e)})}}(t,y)}),y}if(p.match(/^(output)|(inner-input)$/gi)){let e=y;if(t.outputPins.length){if(u)for(let t in u)e.returnParams[t]=u[t]||null;t.outputPins.find(t=>null==e.returnParams[t.hostId])||e.resolve()}}}}let P,E,v,g=null;let b="stop";function I(){return"running"===b}let O={},w={};function D(t,e,n="runtime"){return function(t,e){if(!r(t,e))throw new Error("Invalid item type")}(t,o.FRAME),x(t,e,n),g={on(t,e){t&&"string"==typeof t&&"function"==typeof e&&(w[t.toLowerCase()]=e)},run(e=t,n){if("stop"===b&&(f={}),function(t){return Object.assign(O,t||{}),E=[],v=[],!0}(n))return function(){function t(t){try{t.exe&&t.exe()}catch(t){w.error?w.error(t):console.error(t)}e(P)}function e(n){if("stop"==b||n!==P)return;let o;if("pause"==b&&setTimeout(e,1e3),v.length>0?o=v.shift():E.length>0&&(o=E.shift()),o){O.debug?setTimeout(()=>{t(o)},o.debugSleep):"number"==typeof o.sleep&&o.sleep>-1?setTimeout(()=>{t(o)},0):t(o)}else setTimeout(t=>e(n))}b="running",P=u(),e(P),new Promise((t,e)=>{})}(),t=>e._exe(void 0,t,void 0,"input",!0)},update:(e,n=t)=>(n._update(e,void 0,void 0),!0),pause:A,stop(){const t=(b="stop",!0);return g=null,E=void 0,v=void 0,f={},t}}}function A(){return b="pause",!0}function M(t,e){const n={_all:{},_waiting:{},set(t,e){this._all[t]=e;const n=this._waiting[t];if(n)try{n.forEach(t=>{e(t)}),delete this._waiting[t]}finally{}return!0},get(t){return this._all[t]},waiting(t,e){let n=this._waiting[t];n||(n=this._waiting[t]=[]),n.push(e)}},o=u(),r={};return{inputs:new Proxy({},{ownKeys(e){const n=[];return i.each(t=>{n.push(t.hostId)},t.inputPins,t.inputPinsInModel),n},getOwnPropertyDescriptor:t=>({enumerable:!0,configurable:!0}),get:(t,e,i)=>"__id__"===e?o:function(t){n.set(e,(function(n){const o=r[e];if(void 0!==n&&o){r[e]=void 0;const[o,i]=n;t(o,(function(t){"function"==typeof i&&i(t)}))}}))},set(t,o,i,u){r[o]=i;const s=n.get(o);return s?((null==e?void 0:e.input)&&e.input(),s(i)):n.waiting(o,i),!0}}),outputs:new Proxy({},{ownKeys(e){const n=[];return i.each(t=>{n.push(t.hostId)},t.outputPins,t.outputPinsInModel),n},getOwnPropertyDescriptor:t=>({enumerable:!0,configurable:!0}),get(n,r,u){if("__id__"===r)return o;let s;return function(n,o){if(t.outputPins){s=o;const u=function(t){"function"==typeof s&&s(t)},c=i.find(({hostId:t})=>r==t,t.outputPins,t.outputPinsInModel);if(!c)throw new Error(`No output(hostId=${r}) found.`);Promise.resolve().then(()=>{(null==e?void 0:e.output)&&e.output(n),c._exe(null,n,u,t)})}}}})}}}])}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n')},function(module){eval('module.exports = JSON.parse("{\\"title\\":\\"调试器\\",\\"namespace\\":\\"xgraph.coms.debugger\\",\\"author\\":\\"CheMingjun\\",\\"author_name\\":\\"车明君\\",\\"version\\":\\"1.0.0\\",\\"description\\":\\"调试器\\",\\"runtime\\":\\"./Debugger.tsx\\",\\"inputs\\":[{\\"id\\":\\"val\\",\\"title\\":\\"显示数据\\",\\"schema\\":{\\"request\\":[{\\"type\\":\\"follow\\"}],\\"response\\":[{\\"type\\":\\"null\\"}]}}],\\"outputs\\":[{\\"id\\":\\"randomNum\\",\\"title\\":\\"输出随机数字\\",\\"schema\\":{\\"request\\":[{\\"type\\":\\"number\\"}],\\"response\\":[{\\"type\\":\\"null\\"}]}},{\\"id\\":\\"randomNumAndRtn\\",\\"title\\":\\"输出随机数字并返回\\",\\"schema\\":{\\"request\\":[{\\"type\\":\\"number\\"}],\\"response\\":[{\\"type\\":\\"follow\\"}]}}]}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7\n')},function(module,exports,__webpack_require__){eval("var api = __webpack_require__(3);\n            var content = __webpack_require__(19);\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.i, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL3hnQ29tcGlsZXJXZWIvLi4vY29tbGliL3NyYy9kZWJ1Z2dlci9EZWJ1Z2dlci5sZXNzPzk4MGEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vY29tcGlsZXItd2ViL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vY29tcGlsZXItd2ViL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTYtMSEuLi8uLi8uLi9jb21waWxlci13ZWIvbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vRGVidWdnZXIubGVzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n")},function(module){eval('module.exports = JSON.parse("{\\"title\\":\\"模块\\",\\"namespace\\":\\"xgraph.coms.module\\",\\"author\\":\\"CheMingjun\\",\\"author_name\\":\\"车明君\\",\\"version\\":\\"1.0.0\\",\\"description\\":\\"子模块\\",\\"icon\\":\\"./icon.png\\",\\"data\\":\\"./data.json\\",\\"runtime\\":\\"./runtime.ts\\",\\"editors\\":\\"./editors.ts\\",\\"slots\\":[{\\"id\\":\\"default\\",\\"title\\":\\"Default slot\\",\\"type\\":\\"scope\\"}]}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n')},function(module){eval('module.exports = JSON.parse("{\\"inputCount\\":0,\\"outputCount\\":0}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///10\n')},function(module){eval('module.exports = JSON.parse("{\\"title\\":\\"条件\\",\\"namespace\\":\\"xgraph.coms.if\\",\\"author\\":\\"CheMingjun\\",\\"author_name\\":\\"车明君\\",\\"version\\":\\"1.0.0\\",\\"description\\":\\"条件判断\\",\\"icon\\":\\"./icon.png\\",\\"runtime\\":\\"./IF.tsx\\",\\"inputs\\":[{\\"id\\":\\"expression\\",\\"title\\":\\"条件\\",\\"schema\\":{\\"request\\":[{\\"type\\":\\"follow\\"}],\\"response\\":[{\\"type\\":\\"follow\\"}]}}],\\"slots\\":[{\\"id\\":\\"true\\",\\"title\\":\\"条件为真\\",\\"type\\":\\"scope\\",\\"inputs\\":[{\\"id\\":\\"expression\\",\\"title\\":\\"当前条件\\"}]},{\\"id\\":\\"false\\",\\"title\\":\\"条件为假\\",\\"type\\":\\"scope\\",\\"inputs\\":[{\\"id\\":\\"expression\\",\\"title\\":\\"当前条件\\"}]}]}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return IF; });\n/* harmony import */ var _IF_less__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);\n/* harmony import */ var _IF_less__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_IF_less__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var rxui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);\n/* harmony import */ var rxui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(rxui__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction IF({ env, inputs, slots }) {\n    const my = Object(rxui__WEBPACK_IMPORTED_MODULE_1__[\"useObservable\"])(class {\n        constructor() {\n            this.curSlotId = 'true';\n        }\n    });\n    Object(rxui__WEBPACK_IMPORTED_MODULE_1__[\"useComputed\"])(() => {\n        inputs['expression'](val => {\n            //console.log('IF---expression--',val)\n            const cval = eval(val);\n            if (cval) {\n                my.curSlotId = 'true';\n            }\n            else {\n                my.curSlotId = 'false';\n            }\n            my.expression = cval;\n        });\n    });\n    const renderSlots = Object(rxui__WEBPACK_IMPORTED_MODULE_1__[\"useComputed\"])(() => {\n        if (env.runtime) {\n            const realyDo = my.expression !== void 0;\n            return realyDo ? [\n                React.createElement(\"div\", { key: 'true', style: { display: my.expression ? 'block' : 'none' } }, slots['true'].render({ expression: my.expression })),\n                React.createElement(\"div\", { key: 'false', style: { display: !my.expression ? 'block' : 'none' } }, slots['false'].render({ expression: my.expression }))\n            ] : null;\n        }\n        else if (env.edit) {\n            return [\n                React.createElement(\"div\", { key: 'true' }, slots['true'].render()),\n                React.createElement(\"div\", { key: 'false' }, slots['false'].render())\n            ];\n        }\n    });\n    return (React.createElement(\"div\", { className: _IF_less__WEBPACK_IMPORTED_MODULE_0___default.a.if }, renderSlots));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly94Z0NvbXBpbGVyV2ViLy4uL2NvbWxpYi9zcmMvaWYvSUYudHN4PzE0ZTgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNzcyBmcm9tICcuL0lGLmxlc3MnO1xuaW1wb3J0IHsgdXNlQ29tcHV0ZWQsIHVzZU9ic2VydmFibGUgfSBmcm9tIFwicnh1aVwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSUYoeyBlbnYsIGlucHV0cywgc2xvdHMgfSkge1xuICAgIGNvbnN0IG15ID0gdXNlT2JzZXJ2YWJsZShjbGFzcyB7XG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgdGhpcy5jdXJTbG90SWQgPSAndHJ1ZSc7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICB1c2VDb21wdXRlZCgoKSA9PiB7XG4gICAgICAgIGlucHV0c1snZXhwcmVzc2lvbiddKHZhbCA9PiB7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdJRi0tLWV4cHJlc3Npb24tLScsdmFsKVxuICAgICAgICAgICAgY29uc3QgY3ZhbCA9IGV2YWwodmFsKTtcbiAgICAgICAgICAgIGlmIChjdmFsKSB7XG4gICAgICAgICAgICAgICAgbXkuY3VyU2xvdElkID0gJ3RydWUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbXkuY3VyU2xvdElkID0gJ2ZhbHNlJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG15LmV4cHJlc3Npb24gPSBjdmFsO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBjb25zdCByZW5kZXJTbG90cyA9IHVzZUNvbXB1dGVkKCgpID0+IHtcbiAgICAgICAgaWYgKGVudi5ydW50aW1lKSB7XG4gICAgICAgICAgICBjb25zdCByZWFseURvID0gbXkuZXhwcmVzc2lvbiAhPT0gdm9pZCAwO1xuICAgICAgICAgICAgcmV0dXJuIHJlYWx5RG8gPyBbXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGtleTogJ3RydWUnLCBzdHlsZTogeyBkaXNwbGF5OiBteS5leHByZXNzaW9uID8gJ2Jsb2NrJyA6ICdub25lJyB9IH0sIHNsb3RzWyd0cnVlJ10ucmVuZGVyKHsgZXhwcmVzc2lvbjogbXkuZXhwcmVzc2lvbiB9KSksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGtleTogJ2ZhbHNlJywgc3R5bGU6IHsgZGlzcGxheTogIW15LmV4cHJlc3Npb24gPyAnYmxvY2snIDogJ25vbmUnIH0gfSwgc2xvdHNbJ2ZhbHNlJ10ucmVuZGVyKHsgZXhwcmVzc2lvbjogbXkuZXhwcmVzc2lvbiB9KSlcbiAgICAgICAgICAgIF0gOiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGVudi5lZGl0KSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBrZXk6ICd0cnVlJyB9LCBzbG90c1sndHJ1ZSddLnJlbmRlcigpKSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsga2V5OiAnZmFsc2UnIH0sIHNsb3RzWydmYWxzZSddLnJlbmRlcigpKVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogY3NzLmlmIH0sIHJlbmRlclNsb3RzKSk7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n")},function(module,exports,__webpack_require__){eval("var api = __webpack_require__(3);\n            var content = __webpack_require__(20);\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.i, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly94Z0NvbXBpbGVyV2ViLy4uL2NvbWxpYi9zcmMvaWYvSUYubGVzcz82N2M1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL2NvbXBpbGVyLXdlYi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL2NvbXBpbGVyLXdlYi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS02LTEhLi4vLi4vLi4vY29tcGlsZXItd2ViL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0lGLmxlc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///13\n")},function(module){eval('module.exports = JSON.parse("{\\"title\\":\\"循环\\",\\"namespace\\":\\"xgraph.coms.for\\",\\"author\\":\\"CheMingjun\\",\\"author_name\\":\\"车明君\\",\\"version\\":\\"1.0.0\\",\\"description\\":\\"条件判断\\",\\"icon\\":\\"./icon.png\\",\\"runtime\\":\\"./For.tsx\\",\\"inputs\\":[{\\"id\\":\\"datasource\\",\\"title\\":\\"列表\\",\\"schema\\":{\\"request\\":[{\\"type\\":\\"array\\"}],\\"response\\":[{\\"type\\":\\"null\\"}]}}],\\"slots\\":[{\\"id\\":\\"content\\",\\"title\\":\\"内容\\",\\"inputs\\":[{\\"id\\":\\"curVal\\",\\"title\\":\\"当前项\\",\\"schema\\":{\\"request\\":[{\\"type\\":\\"any\\"}],\\"response\\":[{\\"type\\":\\"null\\"}]}},{\\"id\\":\\"index\\",\\"title\\":\\"当前序号\\",\\"schema\\":{\\"request\\":[{\\"type\\":\\"number\\"}],\\"response\\":[{\\"type\\":\\"null\\"}]}}]}]}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///14\n')},function(module){eval('module.exports = JSON.parse("{\\"title\\":\\"ModuleJoiner\\",\\"namespace\\":\\"xgraph.coms.moduleJoiner\\",\\"author\\":\\"CheMingjun\\",\\"author_name\\":\\"车明君\\",\\"version\\":\\"1.0.0\\",\\"description\\":\\"模块连接器\\",\\"runtime\\":\\"./ModuleJoiner.ts\\",\\"rtType\\":\\"js\\",\\"inputs\\":[{\\"id\\":\\"in\\",\\"title\\":\\"当前模块输出\\",\\"schema\\":{\\"request\\":[{\\"type\\":\\"follow\\"}],\\"response\\":[{\\"type\\":\\"null\\"}]}}]}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///15\n')},function(module){eval('module.exports = JSON.parse("{\\"title\\":\\"DialogInputs\\",\\"namespace\\":\\"xgraph.coms.dialogInputs\\",\\"author\\":\\"CheMingjun\\",\\"author_name\\":\\"车明君\\",\\"version\\":\\"1.0.0\\",\\"description\\":\\"对话框连接器\\",\\"runtime\\":\\"./runtime.ts\\",\\"rtType\\":\\"js\\",\\"inputs\\":[{\\"id\\":\\"commit\\",\\"title\\":\\"确定并关闭对话框\\"},{\\"id\\":\\"cancel\\",\\"title\\":\\"取消并关闭对话框\\"}]}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///16\n')},function(module){eval('module.exports = JSON.parse("{\\"title\\":\\"按钮组\\",\\"namespace\\":\\"xgraph.coms.dialogProxy\\",\\"author\\":\\"CheMingjun\\",\\"author_name\\":\\"车明君\\",\\"version\\":\\"1.0.0\\",\\"description\\":\\"对话框代理\\",\\"runtime\\":\\"./runtime.tsx\\",\\"outputs\\":[{\\"id\\":\\"commit\\",\\"title\\":\\"确定\\"},{\\"id\\":\\"cancel\\",\\"title\\":\\"取消\\"},{\\"id\\":\\"apply\\",\\"title\\":\\"应用\\"}]}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///17\n')},function(module,exports,__webpack_require__){eval("var api = __webpack_require__(3);\n            var content = __webpack_require__(22);\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.i, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly94Z0NvbXBpbGVyV2ViLy4uL2NvbWxpYi9zcmMvZGlhbG9nLXByb3h5L3J1bnRpbWUubGVzcz83MDE5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL2NvbXBpbGVyLXdlYi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL2NvbXBpbGVyLXdlYi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS02LTEhLi4vLi4vLi4vY29tcGlsZXItd2ViL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3J1bnRpbWUubGVzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///18\n")},function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(4);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, ".debugger-b244c {\\n  border: 2px dashed red;\\n  color: red;\\n  padding: 10px;\\n  width: fit-content;\\n  display: flex;\\n  flex-direction: row;\\n}\\n.debugger-b244c > * {\\n  margin: 2px 10px;\\n}\\n", ""]);\n// Exports\nexports.locals = {\n\t"debugger": "debugger-b244c"\n};\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly94Z0NvbXBpbGVyV2ViLy4uL2NvbWxpYi9zcmMvZGVidWdnZXIvRGVidWdnZXIubGVzcz8wNWIzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vY29tcGlsZXItd2ViL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmRlYnVnZ2VyLWIyNDRjIHtcXG4gIGJvcmRlcjogMnB4IGRhc2hlZCByZWQ7XFxuICBjb2xvcjogcmVkO1xcbiAgcGFkZGluZzogMTBweDtcXG4gIHdpZHRoOiBmaXQtY29udGVudDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbn1cXG4uZGVidWdnZXItYjI0NGMgPiAqIHtcXG4gIG1hcmdpbjogMnB4IDEwcHg7XFxufVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5leHBvcnRzLmxvY2FscyA9IHtcblx0XCJkZWJ1Z2dlclwiOiBcImRlYnVnZ2VyLWIyNDRjXCJcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///19\n')},function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(4);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, ".if-15ef2 > div {\\n  min-height: 100px;\\n}\\n", ""]);\n// Exports\nexports.locals = {\n\t"if": "if-15ef2"\n};\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly94Z0NvbXBpbGVyV2ViLy4uL2NvbWxpYi9zcmMvaWYvSUYubGVzcz82YzVjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vY29tcGlsZXItd2ViL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmlmLTE1ZWYyID4gZGl2IHtcXG4gIG1pbi1oZWlnaHQ6IDEwMHB4O1xcbn1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0cy5sb2NhbHMgPSB7XG5cdFwiaWZcIjogXCJpZi0xNWVmMlwiXG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///20\n')},function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(4);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, ".for-74b1c {\\n  width: 100%;\\n}\\n.forScrollY-63c1a {\\n  overflow-y: auto;\\n}\\n.forScrollY-63c1a > div {\\n  position: relative;\\n  width: 100%;\\n  height: 100%;\\n}\\n.forScrollX-a08b3 {\\n  overflow-x: auto;\\n}\\n.forScrollX-a08b3 > div {\\n  height: 100%;\\n}\\n.forScrollX-a08b3 > div > div {\\n  position: relative;\\n  display: inline-block;\\n}\\n", ""]);\n// Exports\nexports.locals = {\n\t"for": "for-74b1c",\n\t"forScrollY": "forScrollY-63c1a",\n\t"forScrollX": "forScrollX-a08b3"\n};\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly94Z0NvbXBpbGVyV2ViLy4uL2NvbWxpYi9zcmMvZm9yL2Zvci5sZXNzPzUwZmMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9jb21waWxlci13ZWIvbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuZm9yLTc0YjFjIHtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4uZm9yU2Nyb2xsWS02M2MxYSB7XFxuICBvdmVyZmxvdy15OiBhdXRvO1xcbn1cXG4uZm9yU2Nyb2xsWS02M2MxYSA+IGRpdiB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuLmZvclNjcm9sbFgtYTA4YjMge1xcbiAgb3ZlcmZsb3cteDogYXV0bztcXG59XFxuLmZvclNjcm9sbFgtYTA4YjMgPiBkaXYge1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG4uZm9yU2Nyb2xsWC1hMDhiMyA+IGRpdiA+IGRpdiB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5leHBvcnRzLmxvY2FscyA9IHtcblx0XCJmb3JcIjogXCJmb3ItNzRiMWNcIixcblx0XCJmb3JTY3JvbGxZXCI6IFwiZm9yU2Nyb2xsWS02M2MxYVwiLFxuXHRcImZvclNjcm9sbFhcIjogXCJmb3JTY3JvbGxYLWEwOGIzXCJcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///21\n')},function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(4);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, ".toolbar-18319 button {\\n  padding: 3px 10px;\\n  margin: 2px;\\n}\\n", ""]);\n// Exports\nexports.locals = {\n\t"toolbar": "toolbar-18319"\n};\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly94Z0NvbXBpbGVyV2ViLy4uL2NvbWxpYi9zcmMvZGlhbG9nLXByb3h5L3J1bnRpbWUubGVzcz85NTA3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vY29tcGlsZXItd2ViL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnRvb2xiYXItMTgzMTkgYnV0dG9uIHtcXG4gIHBhZGRpbmc6IDNweCAxMHB4O1xcbiAgbWFyZ2luOiAycHg7XFxufVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5leHBvcnRzLmxvY2FscyA9IHtcblx0XCJ0b29sYmFyXCI6IFwidG9vbGJhci0xODMxOVwiXG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///22\n')},function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(4);\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, ".slot-78f44 {\\n  width: 100%;\\n  height: 100% !important;\\n  position: relative !important;\\n}\\n.lyFlexColumn-bc992 {\\n  display: flex;\\n  flex-direction: column;\\n}\\n.lyFlexRow-40836 {\\n  display: flex;\\n  flex-direction: row;\\n  flex-wrap: wrap;\\n}\\n.justifyContentFlexStart-6e8c3 {\\n  justify-content: flex-start;\\n}\\n.justifyContentFlexCenter-1b2b7 {\\n  justify-content: center;\\n}\\n.justifyContentFlexFlexEnd-bb109 {\\n  justify-content: flex-end;\\n}\\n.justifyContentFlexSpaceAround-bc67b {\\n  justify-content: space-around;\\n}\\n.justifyContentFlexSpaceBetween-2463c {\\n  justify-content: space-between;\\n}\\n.alignItemsFlexStart-297e8 {\\n  align-items: flex-start;\\n}\\n.alignItemsFlexCenter-74c2d {\\n  align-items: center;\\n}\\n.alignItemsFlexFlexEnd-86a8e {\\n  align-items: flex-end;\\n}\\n.debugFocus-417fb {\\n  outline: 1px dashed red;\\n  outline-offset: -3px;\\n}\\n", ""]);\n// Exports\nexports.locals = {\n\t"slot": "slot-78f44",\n\t"lyFlexColumn": "lyFlexColumn-bc992",\n\t"lyFlexRow": "lyFlexRow-40836",\n\t"justifyContentFlexStart": "justifyContentFlexStart-6e8c3",\n\t"justifyContentFlexCenter": "justifyContentFlexCenter-1b2b7",\n\t"justifyContentFlexFlexEnd": "justifyContentFlexFlexEnd-bb109",\n\t"justifyContentFlexSpaceAround": "justifyContentFlexSpaceAround-bc67b",\n\t"justifyContentFlexSpaceBetween": "justifyContentFlexSpaceBetween-2463c",\n\t"alignItemsFlexStart": "alignItemsFlexStart-297e8",\n\t"alignItemsFlexCenter": "alignItemsFlexCenter-74c2d",\n\t"alignItemsFlexFlexEnd": "alignItemsFlexFlexEnd-86a8e",\n\t"debugFocus": "debugFocus-417fb"\n};\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly94Z0NvbXBpbGVyV2ViLy4vc3JjL3NraW4ubGVzcz82ZDVkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuc2xvdC03OGY0NCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJSAhaW1wb3J0YW50O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlICFpbXBvcnRhbnQ7XFxufVxcbi5seUZsZXhDb2x1bW4tYmM5OTIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcbi5seUZsZXhSb3ctNDA4MzYge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICBmbGV4LXdyYXA6IHdyYXA7XFxufVxcbi5qdXN0aWZ5Q29udGVudEZsZXhTdGFydC02ZThjMyB7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxufVxcbi5qdXN0aWZ5Q29udGVudEZsZXhDZW50ZXItMWIyYjcge1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcbi5qdXN0aWZ5Q29udGVudEZsZXhGbGV4RW5kLWJiMTA5IHtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XFxufVxcbi5qdXN0aWZ5Q29udGVudEZsZXhTcGFjZUFyb3VuZC1iYzY3YiB7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcXG59XFxuLmp1c3RpZnlDb250ZW50RmxleFNwYWNlQmV0d2Vlbi0yNDYzYyB7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxufVxcbi5hbGlnbkl0ZW1zRmxleFN0YXJ0LTI5N2U4IHtcXG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcbn1cXG4uYWxpZ25JdGVtc0ZsZXhDZW50ZXItNzRjMmQge1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuLmFsaWduSXRlbXNGbGV4RmxleEVuZC04NmE4ZSB7XFxuICBhbGlnbi1pdGVtczogZmxleC1lbmQ7XFxufVxcbi5kZWJ1Z0ZvY3VzLTQxN2ZiIHtcXG4gIG91dGxpbmU6IDFweCBkYXNoZWQgcmVkO1xcbiAgb3V0bGluZS1vZmZzZXQ6IC0zcHg7XFxufVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5leHBvcnRzLmxvY2FscyA9IHtcblx0XCJzbG90XCI6IFwic2xvdC03OGY0NFwiLFxuXHRcImx5RmxleENvbHVtblwiOiBcImx5RmxleENvbHVtbi1iYzk5MlwiLFxuXHRcImx5RmxleFJvd1wiOiBcImx5RmxleFJvdy00MDgzNlwiLFxuXHRcImp1c3RpZnlDb250ZW50RmxleFN0YXJ0XCI6IFwianVzdGlmeUNvbnRlbnRGbGV4U3RhcnQtNmU4YzNcIixcblx0XCJqdXN0aWZ5Q29udGVudEZsZXhDZW50ZXJcIjogXCJqdXN0aWZ5Q29udGVudEZsZXhDZW50ZXItMWIyYjdcIixcblx0XCJqdXN0aWZ5Q29udGVudEZsZXhGbGV4RW5kXCI6IFwianVzdGlmeUNvbnRlbnRGbGV4RmxleEVuZC1iYjEwOVwiLFxuXHRcImp1c3RpZnlDb250ZW50RmxleFNwYWNlQXJvdW5kXCI6IFwianVzdGlmeUNvbnRlbnRGbGV4U3BhY2VBcm91bmQtYmM2N2JcIixcblx0XCJqdXN0aWZ5Q29udGVudEZsZXhTcGFjZUJldHdlZW5cIjogXCJqdXN0aWZ5Q29udGVudEZsZXhTcGFjZUJldHdlZW4tMjQ2M2NcIixcblx0XCJhbGlnbkl0ZW1zRmxleFN0YXJ0XCI6IFwiYWxpZ25JdGVtc0ZsZXhTdGFydC0yOTdlOFwiLFxuXHRcImFsaWduSXRlbXNGbGV4Q2VudGVyXCI6IFwiYWxpZ25JdGVtc0ZsZXhDZW50ZXItNzRjMmRcIixcblx0XCJhbGlnbkl0ZW1zRmxleEZsZXhFbmRcIjogXCJhbGlnbkl0ZW1zRmxleEZsZXhFbmQtODZhOGVcIixcblx0XCJkZWJ1Z0ZvY3VzXCI6IFwiZGVidWdGb2N1cy00MTdmYlwiXG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///23\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"parse\", function() { return /* reexport */ parse; });\n__webpack_require__.d(__webpack_exports__, \"RenderReact\", function() { return /* reexport */ RenderReact; });\n\n// CONCATENATED MODULE: ../compiler/src/types.ts\nvar E_ItemType;\n(function (E_ItemType) {\n    E_ItemType[E_ItemType[\"FRAME\"] = 0] = \"FRAME\";\n    E_ItemType[E_ItemType[\"NODE\"] = 1] = \"NODE\";\n    E_ItemType[E_ItemType[\"PIN\"] = 2] = \"PIN\";\n    E_ItemType[E_ItemType[\"JOINT\"] = 3] = \"JOINT\";\n    E_ItemType[E_ItemType[\"CONNECTION\"] = 4] = \"CONNECTION\";\n})(E_ItemType || (E_ItemType = {}));\n\n// CONCATENATED MODULE: ../compiler/src/util.ts\nfunction expectModel(model, type) {\n    if (!isModelOf(model, type)) {\n        throw new Error(`Invalid item type`);\n    }\n}\nfunction isModelOf(model, type) {\n    return model && model['_type'] == type;\n}\nfunction expectType(item, type) {\n    if (!isTypeof(item, type)) {\n        throw new Error(`Invalid item type`);\n    }\n}\nfunction isTypeof(item, type) {\n    return item && typeof (item) == 'object' && item._type == type;\n}\nfunction uuid() {\n    let len = 6, seed = 'abcdefhijkmnprstwxyz', maxPos = seed.length;\n    let rtn = '';\n    for (let i = 0; i < len; i++) {\n        rtn += seed.charAt(Math.floor(Math.random() * maxPos));\n    }\n    return 'u_' + rtn;\n}\nfunction request() {\n}\n/**\n * 对数组的扩展\n */\nvar Arrays;\n(function (Arrays) {\n    /**\n     * 对多个数组进行foreach\n     * 例:        Arrays.each(sth => {sth.state = 0}, this.itemModelAry, this.inputPins, this.outputPins)\n     * @param fn each函数\n     * @param args 遍历数组\n     */\n    function each(fn, ...args) {\n        args.forEach(ary => {\n            ary && ary.forEach(fn);\n        });\n    }\n    Arrays.each = each;\n    /**\n     * 对多个数组进行find\n     * 例:        Arrays.find(sth => {sth.state == 0}, this.itemModelAry, this.inputPins, this.outputPins)\n     * @param fn each函数\n     * @param args 遍历数组\n     */\n    function find(fn, ...args) {\n        let rtn;\n        args.find(ary => {\n            if (ary) {\n                return rtn = ary.find(sth => fn(sth));\n            }\n        });\n        return rtn;\n    }\n    Arrays.find = find;\n})(Arrays || (Arrays = {}));\n\n// CONCATENATED MODULE: ../compiler/src/constants.ts\nconst UNDEFINED_FRAME_LABEL = 'UNDEFINED_FRAME_LABEL';\n\n// EXTERNAL MODULE: ../compiler/dist/index.js\nvar dist = __webpack_require__(6);\n\n// CONCATENATED MODULE: ../compiler/src/model/Con.ts\n\n\n\nfunction compile(con) {\n    let conR = con;\n    if (!conR._exe) {\n        conR._exe = function (scope, value, callback, from) {\n            if (!isStateOfRunning()) {\n                return;\n            }\n            const finishPin = con.finishPin.forkedFrom || con.finishPin;\n            // if(con.finishPin.forkedFrom){\n            //   debugger\n            // }\n            if (typeof finishPin._exe !== 'function') {\n                const startCom = Object(dist[\"isTypeof\"])(con.startPin.parent, E_ItemType.NODE) ? con.startPin.parent : void 0;\n                throw new Error(`连接(来自:${startCom ? startCom.runtime.title : '未知组件'}，${conR.title})已断开.`);\n            }\n            if (config.debug && config.debug.stepTime) {\n                // commitTask({\n                //   name: 'Connection',\n                //   type: 'micro',\n                //   debugSleep: config.debug.stepTime,\n                //   exe: () => {\n                //     (<I_PinRunnable | I_JointRunnable>con.finishPin)._exe(scope,value, callback)\n                //     // commitTask({\n                //     //   name: 'Connection-warting',\n                //     //   type: 'micro',\n                //     //   sleep: 100\n                //     // })\n                //   }\n                // })\n                finishPin._exe(scope, value, callback, from);\n            }\n            else {\n                finishPin._exe(scope, value, callback, from);\n            }\n        };\n    }\n}\n\n// CONCATENATED MODULE: ../compiler/src/scope.ts\n\nlet curScopes;\nfunction createScope(parent, instId, frameId, asRoot) {\n    let rtn = {\n        id: uuid(),\n        instId,\n        hostId: frameId,\n        path: void 0,\n        parent,\n        returnParams: {},\n        resolve: null,\n        comInsts: {},\n        applyScope(instId, frameLabel, frameId, asRoot) {\n            const scope = createScope(rtn, instId, frameId, asRoot);\n            let inst = rtn.comInsts[instId];\n            if (inst) {\n                !inst.scopes && (inst.scopes = []);\n                inst.scopes.push(scope);\n            }\n            //inst.cur = scope\n            regInCurScope(instId, frameId, scope);\n            return scope;\n        }\n    };\n    // if (promise) {\n    //   rtn.resolve = function () {\n    //     promise.resolve(rtn.returnParams)\n    //   }\n    // }\n    if (asRoot) {\n        rtn.path = rtn.id;\n    }\n    else {\n        const ary = [rtn.id];\n        let tp = rtn.parent;\n        while (tp) {\n            if (tp.parent) {\n                ary.push(tp.id);\n            }\n            tp = tp.parent;\n        }\n        rtn.path = ary.reverse().join(':');\n    }\n    return rtn;\n}\nfunction applyScope(instId, frameId) {\n    const scope = createScope(void 0, instId, frameId);\n    regInCurScope(instId, frameId, scope);\n    return scope;\n}\nfunction getCurrentScope(instId, frameId) {\n    var _a;\n    return (_a = curScopes[instId]) === null || _a === void 0 ? void 0 : _a[frameId];\n}\nfunction start() {\n    curScopes = {};\n}\nfunction stop() {\n    curScopes = {};\n}\nfunction regInCurScope(nodeInstId, frameId, scope) {\n    let cs = curScopes[nodeInstId];\n    if (!cs) {\n        curScopes[nodeInstId] = cs = {};\n    }\n    // if(cs[frameId]){\n    //   debugger\n    // }\n    cs[frameId] = scope;\n}\n\n// CONCATENATED MODULE: ../compiler/src/model/Pin.ts\n\n\n\n\n\nfunction Pin_compile(pin, opts, mode = 'runtime') {\n    // if(pin.hostId===\"inu_t43xys\"){\n    //   debugger\n    // }\n    pin.conAry && pin.conAry.forEach(con => {\n        compile(con);\n    });\n    pin._exe = function (scope, value, callback, from) {\n        if (!isStateOfRunning()) {\n            return;\n        }\n        if (emitter.execute) {\n            emitter.execute(E_ItemType.PIN, pin.id, value);\n        }\n        let curScope = scope;\n        if (!curScope) { //Invoke outputs in component\n            if (isTypeof(pin.parent, E_ItemType.NODE)) {\n                const node = pin.parent, frame = node.parent;\n                curScope = getCurrentScope(!frame._exeAsRoot_ && frame.parent ? frame.parent.runtime.id : void 0, frame.id);\n            }\n            else if (isTypeof(pin.parent, E_ItemType.FRAME)) {\n                const frame = pin.parent;\n                curScope = getCurrentScope(!frame._exeAsRoot_ && frame.parent ? frame.parent.runtime.id : void 0, frame.id);\n            }\n        }\n        if (!curScope) {\n            debugger;\n        }\n        let pinOpt = opts.pin ? opts.pin(pin) : undefined;\n        if (pinOpt) {\n            const rtn = pinOpt.exe(value, from);\n            if (rtn === false) {\n                return;\n            }\n        }\n        const callbakFn = (val) => {\n            if (pinOpt) {\n                pinOpt.exe(val, pin, '返回');\n            }\n            if (typeof callback === 'function') {\n                callback(val);\n            }\n        };\n        const pinR = pin;\n        if (pinR.direction == 'input') {\n            if (pin.proxyPin && pin.proxyPin._exe) {\n                const frame = pin.proxyPin.parent;\n                frame._exe(curScope, //Parent is undefined when running in a submodule\n                { [pin.hostId]: value }, void 0, pin.direction);\n            }\n            else {\n                pin.parent._exe(curScope, void 0, { [pin.hostId]: value }, callbakFn);\n            }\n        }\n        else if (pin.direction === 'inner-input') {\n            if (pin.proxyPin && pin.proxyPin._exe) {\n                pin.proxyPin._exe(curScope.parent, value, callbakFn, from);\n            }\n            else {\n                return;\n            }\n        }\n        else if (pin.direction == 'output' || pin.direction == 'inner-output') {\n            if (pin.proxyPin && pin.proxyPin._exe) {\n                pin.proxyPin._exe(scope.parent, value, callbakFn, from);\n            }\n            else {\n                let mockData;\n                if (mode === 'mock') { //For Mock\n                    if (pin.mockData) {\n                        mockData = pin.mockData;\n                    }\n                }\n                if (pin.conAry && pin.conAry.length > 0) {\n                    //const rtnAry = []\n                    pin.conAry.forEach((con, idx) => {\n                        //rtnAry[idx] = void 0\n                        let fn;\n                        if (callbakFn) {\n                            if (mockData !== void 0) {\n                                callbakFn(JSON.parse(pin.mockData));\n                            }\n                            else {\n                                fn = function (returnVal) {\n                                    callbakFn(returnVal); //Return directly\n                                    // rtnAry[idx] = {val: returnVal}\n                                    // if (!rtnAry.some(item => item === void 0)) {\n                                    //   callback(rtnAry.map(item => item.val))//Return array(with connection info)\n                                    // }\n                                };\n                            }\n                        }\n                        con._exe(curScope, value, fn, pin);\n                    });\n                }\n                else {\n                    // if (callback && mockData !== void 0) {\n                    //   callback(JSON.parse(pin.mockData))\n                    // }\n                }\n            }\n        }\n    };\n}\n\n// CONCATENATED MODULE: ../compiler/src/model/Node.ts\n\n\n\n\nfunction Node_compile(node, opts, mode = 'runtime') {\n    Arrays.each(pin => Pin_compile(pin, opts, mode), node.inputPins, node.inputPinExts, node.inputPinsInModel);\n    Arrays.each(pin => Pin_compile(pin, opts, mode), node.outputPins, node.inputPinExts, node.outputPinsInModel);\n    const nodeRunnable = node;\n    const nodeOpts = opts.node(node);\n    const rendered = {};\n    let runtimeScriptFn;\n    /**\n     * Render so that component execute it's runtime\n     * @param curScope\n     */\n    function render(curScope, frameLable = UNDEFINED_FRAME_LABEL) {\n        if (typeof nodeOpts.render !== 'function') {\n            throw new Error(`Render config function for node not found.`);\n        }\n        const scopePath = curScope.path;\n        const frames = {};\n        if (node.frames) {\n            node.frames.forEach((frame) => {\n                frames[frame.id] = function (inputParams, frameLable = UNDEFINED_FRAME_LABEL) {\n                    // if(frameLabel==='true'){\n                    //   debugger\n                    // }\n                    //frameLable = curScope.path + ':' + frameLable;//Add namespace\n                    //console.log('>>>>>',frameLable)\n                    const frameScope = frame._exe(curScope, inputParams, frameLable);\n                    if (frameScope) {\n                        return frameScope.path;\n                    }\n                };\n            });\n        }\n        const inst = nodeOpts.render(scopePath, frameLable, frames, curScope);\n        const myInst = {\n            inst: inst,\n            scopes: [],\n        };\n        // if(node.runtime.def.namespace.endsWith('normal')){\n        //   debugger\n        // }\n        curScope.comInsts[node.runtime.id] = myInst; //Set inst to current scope\n        // if(node.runtime.def.namespace==='xgraph.coms.debugger'){\n        //   console.log('node---render---',curScope)\n        // }\n    }\n    nodeRunnable._exe = function (scope, frameLable, params, callback) {\n        // if (!isStateOfRunning()) {\n        //   return\n        // }\n        let debugParams;\n        Arrays.each(pin => {\n            if (pin.dummyData !== void 0) {\n                !debugParams && (debugParams = {});\n                debugParams[pin.hostId] = pin.dummyData;\n            }\n        }, node.inputPins, node.inputPinsInModel);\n        params = debugParams ? Object.assign(debugParams, params) : params;\n        // if (node.runtime.def.namespace === 'power.normal-ui-pc-v2.tabs') {\n        //   debugger\n        // }\n        // if (node.runtime.def.extension) {\n        //   debugger\n        // }\n        if (!rendered[scope.id]) {\n            render(scope, frameLable);\n            rendered[scope.id] = true;\n        }\n        const instDesc = scope.comInsts[node.runtime.id];\n        // if (mode === 'mock') {//Init mock data\n        //   Arrays.each(pin => {\n        //     if (pin.mockData && (!params || params[pin.hostId] === void 0)) {\n        //       if (!params) {\n        //         params = {}\n        //       }\n        //       params[pin.hostId] = JSON.parse(pin.mockData)\n        //     }\n        //   }, node.inputPins, node.inputPinsInModel)\n        // }\n        if (params) {\n            //console.log('------node exe--',params)\n            for (let id in params) {\n                const param = params[id];\n                // if(node.runtime.def.namespace.endsWith('normal')){\n                //   console.log(instDesc.inst.inputs['__id__'])\n                //   debugger\n                // }\n                instDesc.inst.inputs[id] = [param, callback];\n            }\n        }\n        if (nodeOpts.exe) {\n            nodeOpts.exe(instDesc.inst, params, callback);\n        }\n        //\n        //     if(node.runtime.def.rtType==='js'){\n        //       return\n        //     }\n        //\n        //     const rtScript = node.runtime.model.script\n        //     if (rtScript) {\n        // debugger\n        //       if (rtScript.type === 'js') {//Defined runtime script\n        //         if (!runtimeScriptFn) {\n        //           const script = rtScript.content\n        //           const sc = unescape(script)\n        //           try {\n        //             runtimeScriptFn = eval(sc)\n        //           } catch (ex) {\n        //             throw new Error(`组件[${node.def.namespace}] 脚本发生错误:${ex.message}\n        //             ${sc}`)\n        //           }\n        //         }\n        //\n        //         runtimeScriptFn(instDesc.inst.inputs, instDesc.inst.outputs, opts.envVars)\n        //       } else if (rtScript.type === 'extComponent') {\n        //         const extDef = node.runtime.def.extension\n        //         if (opts.extComDef) {\n        //           if (!runtimeScriptFn) {\n        //             let extComDef\n        //             const extDesc = opts.extComDef.find(ep => ep.pointId === extDef.pointId)\n        //             if (extDesc && extDesc.comAry) {\n        //               extComDef = extDesc.comAry.find(ep => ep.id === extDef.instId)\n        //               if (!extComDef) {\n        //                 throw new Error(`No extComponent(id=${extDef.instId}) defined found.`)\n        //               }\n        //             }\n        //\n        //             const script = rtScript.content\n        //             try {\n        //               runtimeScriptFn = eval(script)(extComDef, node.runtime.model.data)\n        //\n        //               runtimeScriptFn(instDesc.inst.inputs, instDesc.inst.outputs, opts.envVars)\n        //             } catch (ex) {\n        //               throw new Error(`ExtComponent(${extComDef.title}) script error:${ex.message}\n        //                   ${script}`)\n        //             }\n        //           }\n        //\n        //           //runtimeScriptFn(instDesc.inst.inputs, instDesc.inst.outputs, opts.envVars)\n        //         }\n        //       } else if (rtScript.type === 'jsEval') {//Defined runtime script\n        //         if (!runtimeScriptFn) {\n        //           const script = rtScript.content\n        //\n        //           //const sc = decodeURIComponent(script)\n        //           //const sc = unescape(script)\n        //           const sc = script\n        //           try {\n        //             runtimeScriptFn = eval(sc)(node.runtime.model)\n        //           } catch (ex) {\n        //             throw new Error(`组件[${node.def.namespace}] 脚本发生错误:${ex.message}\n        //             ${sc}`)\n        //           }\n        //         }\n        //\n        //         runtimeScriptFn(instDesc.inst.inputs, instDesc.inst.outputs, opts.envVars)\n        //       } else if (rtScript.type === 'extPoint') {\n        //         const cpId = rtScript.content\n        //         if (cpId && opts.extComDef) {\n        //           const extPoint = opts.extComDef.find(ep => ep.id === cpId)\n        //           if (!extPoint) {\n        //             throw new Error(`No controlPoint(id=${cpId}) found.`)\n        //           }\n        //\n        //           const fn = function (inputs, outputs) {\n        //             Object.keys(inputs).forEach(id => {\n        //               inputs[id](val => {\n        //                 if (extPoint.inputs) {\n        //                   const inputPin = extPoint.inputs.find(pin => pin.id === id)\n        //\n        //                   if (!inputPin) {\n        //                     throw new Error(`No input(id=${id}) defined in extPoint(id=${cpId}) found.`)\n        //                   }\n        //\n        //                   inputPin.exe({data: rtScript.data}, val)\n        //                 }\n        //               })\n        //             })\n        //\n        //             Object.keys(outputs).forEach(id => {\n        //               outputs[id](val => {\n        //                 if (extPoint.outputs) {\n        //                   const outputPin = extPoint.outputs.find(pin => pin.id === id)\n        //\n        //                   if (!outputPin) {\n        //                     throw new Error(`No output(id=${id}) defined in extPoint(id=${cpId}) found.`)\n        //                   }\n        //\n        //                   outputPin.exe({data: rtScript.data}, val)\n        //                 }\n        //               })\n        //             })\n        //           }\n        //           fn(instDesc.inst.inputs, instDesc.inst.outputs)\n        //         }\n        //       }\n        //     }\n    };\n    if (node.frames) {\n        node.frames.forEach(frame => {\n            Frame_compile(frame, opts);\n        });\n    }\n}\n\n// CONCATENATED MODULE: ../compiler/src/model/Joint.ts\n\nlet todoTasks = new WeakMap();\nfunction Joint_compile(joint, opts, mode = 'runtime') {\n    const comRT = joint.parent.parent.runtime;\n    if (joint.from) {\n        compile(joint.from);\n    }\n    else {\n        console.warn(`组件(${comRT.title},${comRT.def.namespace})存在连接断开.`);\n    }\n    if (joint.to) {\n        compile(joint.to);\n    }\n    else {\n        console.warn(`组件(${comRT.title},${comRT.def.namespace})存在连接断开.`);\n    }\n    const jointR = joint;\n    jointR._exe = function (scope, value, callback) {\n        const jointOpt = opts.joint ? opts.joint(joint) : undefined;\n        const comModel = joint.parent.parent;\n        if (joint.type == 'input') {\n            //scope is parent scope\n            //let curScope: T_Scope = scope.comInsts[comModel.id].cur\n            let curScope = scope.comInsts[comModel.runtime.id].scopes.find(sc => {\n                return sc.hostId === joint.parent.id;\n            });\n            const task = sc => {\n                if (jointOpt) {\n                    jointOpt.exe(value);\n                }\n                if (joint.to) {\n                    joint.to._exe(sc, value, callback, joint.type);\n                }\n            };\n            if (!curScope) { //not init\n                let map = todoTasks.get(joint);\n                if (!map) {\n                    todoTasks.set(joint, map = new WeakMap());\n                }\n                let tkAry = map.get(scope);\n                if (!tkAry) {\n                    map.set(scope, tkAry = []);\n                }\n                tkAry.push(task);\n            }\n            else {\n                let hostId = curScope.hostId;\n                let scoptInst = curScope.parent.comInsts[comModel.runtime.id];\n                scoptInst.scopes.forEach(scope => {\n                    if (scope.hostId == hostId) {\n                        task(scope);\n                    }\n                });\n            }\n        }\n        else { //out\n            if (jointOpt && typeof (jointOpt.exe) == 'function') {\n                jointOpt.exe(value);\n            }\n            if (joint.to) {\n                joint.to._exe(scope.parent, value, callback, joint.type);\n            }\n        }\n    };\n}\nfunction exeTodoTasks(joint, scope) {\n    let key = scope.parent;\n    let map = todoTasks.get(joint);\n    if (map) {\n        let tkAry = map.get(key);\n        if (tkAry) {\n            //map.delete(key)//clear\n            tkAry.forEach(task => {\n                task(scope);\n            });\n        }\n    }\n}\n\n// CONCATENATED MODULE: ../compiler/src/model/Frame.ts\n\n\n\n\n\nfunction Frame_compile(frame, opts, mode = 'runtime') {\n    if (frame.comAry) {\n        frame.comAry.forEach(item => {\n            Node_compile(item, opts, mode);\n        });\n    }\n    frame.inputPins && frame.inputPins.forEach(pin => Pin_compile(pin, opts, mode));\n    frame.outputPins && frame.outputPins.forEach(pin => Pin_compile(pin, opts, mode));\n    frame.inputJoints && frame.inputJoints.forEach(joint => Joint_compile(joint, opts, mode));\n    frame.outputJoints && frame.outputJoints.forEach(joint => Joint_compile(joint, opts, mode));\n    // frame.conAry && frame.conAry.forEach(con => {\n    //   compileCon(con)\n    // });\n    const frameRunnable = frame;\n    const scopeCache = {};\n    // frameRunnable._clear = function(){\n    //   this._exe = void 0\n    //\n    //   if (frame.comAry) {\n    //     frame.comAry.forEach(item => {\n    //       (item as I_NodeRunnable)._clear()\n    //     })\n    //   }\n    //\n    //   frame.inputPins && frame.inputPins.forEach(pin => (pin as I_PinRunnable)._clear())\n    //   frame.outputPins && frame.outputPins.forEach(pin => (pin as I_PinRunnable)._clear())\n    //\n    //   frame.inputJoints && frame.inputJoints.forEach(joint => (joint as I_JointRunnable)._clear())\n    //   frame.outputJoints && frame.outputJoints.forEach(joint => (joint as I_JointRunnable)._clear())\n    //\n    //\n    //   return true\n    // }\n    frameRunnable._update = function (parentScope, params, frameLabel = UNDEFINED_FRAME_LABEL) {\n        const key = frameLabel + parentScope.id;\n        const { curScope, coms } = scopeCache[key];\n        frame.comAry.forEach((node) => {\n            coms.push(node.runtime.id);\n            if (typeof node._exe !== 'function') {\n                //console.log('build-----',node.runtime.def.namespace)\n                Node_compile(node, opts, mode);\n                node._exe(curScope, frameLabel, void 0, void 0);\n            }\n        });\n    };\n    frameRunnable._exe = function (parentScope, params, frameLabel = UNDEFINED_FRAME_LABEL, type, asRoot) {\n        // if(params){\n        //   debugger\n        // }\n        if (!parentScope) {\n            if (frame.parent) { //In subModule\n                const curScope = getCurrentScope(frame.parent ? frame.parent.runtime.id : frame.id, frame.id);\n                if (curScope) {\n                    parentScope = curScope.parent;\n                }\n            }\n            if (!parentScope) {\n                parentScope = applyScope(void 0, frame.id + '-parent');\n            }\n        }\n        const key = frameLabel + parentScope.id;\n        // if(scopeCache[key]){\n        //   console.log(scopeCache[key].coms.length, frame.comAry.length)\n        // }\n        let shouldReresh = false;\n        if (scopeCache[key]) {\n            const cacheComs = scopeCache[key].coms;\n            if (cacheComs.length !== frame.comAry.length) {\n                shouldReresh = true;\n            }\n            else {\n                if (frame.comAry.find(com => {\n                    return cacheComs.indexOf(com.runtime.id) < 0;\n                })) {\n                    shouldReresh = true;\n                }\n            }\n        }\n        if (!scopeCache[key] || shouldReresh) { //Coms length changed\n            if (asRoot) {\n                frameRunnable._exeAsRoot_ = true;\n            }\n            else {\n                frameRunnable._exeAsRoot_ = false;\n            }\n            frameLabel = frameLabel !== void 0 ? frameLabel : UNDEFINED_FRAME_LABEL;\n            let myInstScope;\n            let curScope;\n            if (frameRunnable._exeAsRoot_) { //root frame\n                myInstScope = {\n                    inst: void 0,\n                    scopes: [],\n                };\n            }\n            else {\n                myInstScope = parentScope.comInsts[frame.parent.runtime.id];\n                if (!myInstScope && frame._rootF) { //Running in a submodule\n                    return;\n                }\n            }\n            const comsCache = [];\n            type = typeof type == 'string' ? type : 'input';\n            if (type == 'input') { //Start\n                curScope = parentScope.applyScope(!frameRunnable._exeAsRoot_ && frame.parent ? frame.parent.runtime.id : void 0, frameLabel, frame.id, frame._rootF);\n                // const promise: { resolve: Function } = {\n                //   resolve: null\n                // }\n                if (asRoot) { //Root frame(Toplview)\n                    //curScope = myInstScope.cur\n                    // curScope.resolve = function () {\n                    //   if (emitter.outputs) {\n                    //     emitter.outputs(this.returnParams)\n                    //   }\n                    // }\n                }\n                else {\n                    // if(frame.parent.runtime.def.namespace==='power.normal-ui-pc-v2.tabs'){\n                    //   console.log('frame--exe-',curScope)\n                    // }\n                }\n                //myInstScope.cur = curScope\n                // if (frame.parent) {\n                //   frame.parent.runtime.activeFrameId = frame.hostId;//switch active frame id\n                // }\n                //Exe all components\n                frame.comAry.forEach((node) => {\n                    comsCache.push(node.runtime.id);\n                    if (typeof node._exe !== 'function') {\n                        //console.log('build-----',node.runtime.def.namespace)\n                        Node_compile(node, opts, mode);\n                    }\n                    node._exe(curScope, frameLabel, void 0, void 0);\n                });\n            }\n            scopeCache[key] = { myInstScope, curScope, coms: comsCache };\n        }\n        // else if(asRoot){\n        //   debugger\n        //   const {curScope} = scopeCache[key]\n        //   frame.comAry.forEach((node: I_NodeRunnable) => {\n        //     node._exe(curScope, frameLabel, void 0, void 0)\n        //   })\n        // }\n        const { curScope } = scopeCache[key];\n        type = typeof type == 'string' ? type : 'input';\n        if (type == 'input') { //Start\n            //setTimeout(v=>{\n            // const promise: { resolve: Function } = {\n            //   resolve: null\n            // }\n            // if (frame.parent) {\n            //   frame.parent.runtime.activeFrameId = frame.hostId;//switch active frame id\n            // }\n            //Exe all components\n            // frame.comAry.forEach((node: I_NodeRunnable) => {\n            //   node._exe(curScope, frameLabel, void 0, void 0)\n            // })\n            const mockDatas = {};\n            if (mode === 'mock') { //For Mock\n                if (frame.inputPins.length > 0) {\n                    frame.inputPins.forEach(pin => {\n                        if (pin.mockData) {\n                            mockDatas[pin.hostId] = pin.mockData;\n                        }\n                    });\n                }\n            }\n            params = Object.assign(mockDatas, params);\n            if (params) {\n                for (let id in params) {\n                    const inputPin = frame.inputPins.find(inputPin => inputPin.hostId == id);\n                    if (inputPin) {\n                        ;\n                        inputPin._exe(curScope, params[id], void 0, void 0);\n                    }\n                    else {\n                        // throw new Error(`No inputPin(id=${id}) found`)\n                        if (typeof console != 'undefined' && typeof console.error == 'function') {\n                            console.error(`No inputPin(id=${id}) found`);\n                        }\n                    }\n                }\n            }\n            if (frame.inputJoints) {\n                frame.inputJoints.forEach(joint => {\n                    exeTodoTasks(joint, curScope);\n                });\n            }\n            return curScope;\n            // return new Promise(resolve => {\n            //   promise.resolve = function (result) {\n            //     resolve(result)\n            //   }\n            // })\n            //})\n        }\n        else if (type.match(/^(output)|(inner-input)$/gi)) { //Finish\n            //let myCurScope = myInstScope.cur\n            let myCurScope = curScope;\n            if (frame.outputPins.length) {\n                if (params) {\n                    for (let id in params) {\n                        myCurScope.returnParams[id] = params[id] || null;\n                    }\n                }\n                const notReturned = frame.outputPins.find(pin => myCurScope.returnParams[pin.hostId] == undefined);\n                if (!notReturned) {\n                    myCurScope.resolve();\n                }\n            }\n        }\n    };\n}\n\n// CONCATENATED MODULE: ../compiler/src/executor.ts\n\n\n\n// import {clear as nodeClear} from \"./model/Node\";\n\nlet curRunner = null;\nfunction getRunner() {\n    return curRunner;\n}\nfunction setRunner(runner) {\n    curRunner = runner;\n}\nlet rtToken;\nlet macroTaskQueue;\nlet microTaskQueue;\nlet state = 'stop';\nfunction isStateOfRunning() {\n    return state === 'running';\n}\nlet config = {};\nlet emitter = {};\nfunction executor_compile(graph, options, mode = 'runtime') {\n    expectType(graph, E_ItemType.FRAME);\n    Frame_compile(graph, options, mode);\n    // if (curRunner) {\n    //   throw new Error(`a runner is running now,stop it first.`)\n    // }\n    return curRunner = {\n        on(eventName, caller) {\n            if (eventName && typeof (eventName) == 'string'\n                && typeof (caller) == 'function') {\n                emitter[eventName.toLowerCase()] = caller;\n            }\n        },\n        run(frame = graph, cfg) {\n            if (state === 'stop') {\n                start();\n            }\n            //const frame = graph as I_FrameRunnable\n            if (ready(cfg)) {\n                //const scope = applyScope(graph.id, graph.hostId)\n                go();\n                return (params) => {\n                    return frame._exe(void 0, params, void 0, 'input', true);\n                };\n            }\n        }, update(parentScope, frame = graph) {\n            frame._update(parentScope, void 0, void 0);\n            return true;\n        },\n        pause, stop() {\n            const rtn = executor_stop();\n            clear(graph);\n            stop();\n            return rtn;\n        }\n    };\n}\nfunction ready(cfg) {\n    Object.assign(config, cfg || {});\n    macroTaskQueue = [];\n    microTaskQueue = [];\n    return true;\n}\nfunction go() {\n    state = 'running';\n    //let startTime = new Date().getTime()\n    rtToken = uuid();\n    loop(rtToken);\n    function runTask(task) {\n        //console.log(`Exe task[name=${task.name},type=${task.type || 'macro'}]`)\n        try {\n            task.exe && task.exe();\n        }\n        catch (ex) {\n            if (emitter.error) {\n                emitter.error(ex);\n            }\n            else {\n                console.error(ex);\n            }\n        }\n        loop(rtToken);\n    }\n    function loop(token) {\n        if (state == 'stop' || token !== rtToken) {\n            return;\n        }\n        if (state == 'pause') {\n            setTimeout(loop, 1000);\n        }\n        let task;\n        if (microTaskQueue.length > 0) {\n            task = microTaskQueue.shift();\n        }\n        else if (macroTaskQueue.length > 0) {\n            task = macroTaskQueue.shift();\n        }\n        if (task) {\n            let cb = config.debug;\n            if (cb) {\n                setTimeout(() => {\n                    runTask(task);\n                }, task.debugSleep);\n            }\n            else {\n                if (typeof (task.sleep) == 'number' && task.sleep > -1) {\n                    setTimeout(() => {\n                        runTask(task);\n                    }, 0);\n                }\n                else {\n                    runTask(task);\n                }\n            }\n        }\n        else {\n            //console.log(new Date().getTime()-startTime)\n            setTimeout(v => loop(token));\n        }\n    }\n    return new Promise((resolve, reject) => {\n        //hang the process\n    });\n}\nfunction clear(graph) {\n    curRunner = null;\n    macroTaskQueue = void 0;\n    microTaskQueue = void 0;\n    // ;(graph as I_FrameRunnable)._clear()\n    //nodeClear()\n    return true;\n}\nfunction pause() {\n    state = 'pause';\n    return true;\n}\nfunction executor_stop() {\n    state = 'stop';\n    return true;\n}\nfunction commitTask(task) {\n    if (state == 'stop') {\n        return;\n    }\n    if (task.type && task.type.toLowerCase() == 'micro') {\n        microTaskQueue.push(task);\n    }\n    else {\n        macroTaskQueue.push(task);\n    }\n}\n\n// CONCATENATED MODULE: ../compiler/src/buildUtil.ts\n\n//test\nconst IOID = '__id__';\nfunction createIO(node, ioProxy) {\n    const InputFn = {\n        _all: {},\n        _waiting: {},\n        set(id, fn) {\n            this._all[id] = fn;\n            const queue = this._waiting[id];\n            if (queue) {\n                try {\n                    queue.forEach(val => {\n                        fn(val);\n                    });\n                    delete this._waiting[id];\n                }\n                finally {\n                }\n            }\n            return true;\n        },\n        get(id) {\n            return this._all[id];\n        },\n        waiting(id, val) {\n            let queue = this._waiting[id];\n            if (!queue) {\n                queue = this._waiting[id] = [];\n            }\n            queue.push(val);\n        }\n    };\n    const UID = uuid();\n    const targetOnce = {};\n    const inputs = new Proxy({}, {\n        ownKeys(target) {\n            const ary = [];\n            Arrays.each(pin => {\n                ary.push(pin.hostId);\n            }, node.inputPins, node.inputPinsInModel);\n            return ary;\n        },\n        getOwnPropertyDescriptor(k) {\n            return {\n                enumerable: true,\n                configurable: true,\n            };\n        },\n        get(target, id, receiver) {\n            if (id === IOID) {\n                return UID;\n            }\n            return function (fn) {\n                InputFn.set(id, function (val) {\n                    const onceAry = targetOnce[id];\n                    if (val !== void 0 && onceAry) {\n                        targetOnce[id] = void 0;\n                        const [value, callback] = val;\n                        fn(value, function (rtn) {\n                            if (typeof callback === 'function') {\n                                callback(rtn);\n                            }\n                        });\n                    }\n                });\n            };\n        },\n        set(target, id, value, receiver) {\n            targetOnce[id] = value;\n            const fn = InputFn.get(id);\n            if (fn) {\n                //setTimeout(v=>{////TODO\n                if (ioProxy === null || ioProxy === void 0 ? void 0 : ioProxy.input) {\n                    ioProxy.input();\n                }\n                fn(value);\n                //})\n            }\n            else {\n                InputFn.waiting(id, value);\n            }\n            return true;\n        }\n    });\n    const outputs = new Proxy({}, {\n        ownKeys(target) {\n            const ary = [];\n            Arrays.each(pin => {\n                ary.push(pin.hostId);\n            }, node.outputPins, node.outputPinsInModel);\n            return ary;\n        },\n        getOwnPropertyDescriptor(k) {\n            return {\n                enumerable: true,\n                configurable: true,\n            };\n        },\n        get(target, id, receiver) {\n            if (id === IOID) {\n                return UID;\n            }\n            let callbackFn;\n            return function (data, callback) {\n                if (node.outputPins) {\n                    callbackFn = callback;\n                    const fn = function (returnVal) {\n                        if (typeof callbackFn === 'function') {\n                            callbackFn(returnVal);\n                        }\n                    };\n                    const output = Arrays.find(({ hostId }) => id == hostId, node.outputPins, node.outputPinsInModel);\n                    if (output) { //Ignore observable cycle\n                        Promise.resolve().then(() => {\n                            if (ioProxy === null || ioProxy === void 0 ? void 0 : ioProxy.output) {\n                                ioProxy.output(data);\n                            }\n                            output._exe(null, data, fn, node);\n                        });\n                    }\n                    else {\n                        throw new Error(`No output(hostId=${id}) found.`);\n                    }\n                }\n            };\n        }\n    });\n    return {\n        inputs, outputs\n    };\n}\n\n// CONCATENATED MODULE: ../compiler/src/index.ts\n/**\n * XGraph Compiler 1.0\n *\n *\n * @author: CheMingjun(chemingjun@126.com)\n *\n * All rights reserved\n */\n\n\n\n\n\n// CONCATENATED MODULE: ../compiler/index.ts\n\n\n\n\n// CONCATENATED MODULE: ./src/constants.ts\n//export const KEY_STAGEVIEW = `xg.desn.stageview`\nconst KEY_STAGEVIEW = `xg.desn.mpa.stageview`;\n\n// CONCATENATED MODULE: ./src/parse.ts\n\n\nlet allRefs, refLoaded = {};\nfunction parse(pageContent) {\n    refLoaded = {};\n    const stageView = pageContent[KEY_STAGEVIEW];\n    const { def, refs } = stageView;\n    allRefs = refs;\n    const requireComs = [];\n    const model = getRef(def['_ref_']);\n    const mainModule = model['mainModule'];\n    if (mainModule.frame) {\n        function parseFrame(frame) {\n            if (frame.comAry) {\n                frame.comAry.forEach(com => {\n                    if (isTypeof(com, E_ItemType.NODE)) {\n                        const { runtime } = com;\n                        const key = runtime.def.namespace + '@' + runtime.def.version;\n                        if (requireComs.indexOf(key) <= 0) {\n                            if (!runtime.def.namespace.startsWith('xg-comlib')\n                                && !runtime.def.namespace.startsWith('xgraph.coms.module')) {\n                                requireComs.push(key);\n                            }\n                        }\n                        if (com.frames) {\n                            com.frames.forEach(fr => parseFrame(fr));\n                        }\n                    }\n                });\n            }\n        }\n        parseFrame(mainModule.frame);\n    }\n    return { mainModule, requireComs };\n}\nfunction getRef(ref) {\n    let model = refLoaded[ref];\n    if (model) {\n        return model;\n    }\n    //debugger\n    refLoaded[ref] = model = allRefs[ref];\n    translate(model);\n    return model;\n}\nfunction translate(obj) {\n    if (typeof obj === 'object' && obj) {\n        if (obj['_ref_']) {\n            return getRef(obj['_ref_']);\n        }\n        else {\n            Object.keys(obj).forEach(nm => {\n                let tv = obj[nm];\n                if (Array.isArray(tv)) {\n                    tv.forEach((item, index) => {\n                        tv[index] = translate(item);\n                    });\n                }\n                else {\n                    obj[nm] = translate(tv);\n                }\n            });\n        }\n    }\n    return obj;\n}\n\n// EXTERNAL MODULE: external {\"commonjs\":\"React\",\"commonjs2\":\"React\",\"amd\":\"React\",\"root\":\"React\"}\nvar external_commonjs_React_commonjs2_React_amd_React_root_React_ = __webpack_require__(2);\nvar external_commonjs_React_commonjs2_React_amd_React_root_React_default = /*#__PURE__*/__webpack_require__.n(external_commonjs_React_commonjs2_React_amd_React_root_React_);\n\n// EXTERNAL MODULE: external \"rxui\"\nvar external_rxui_ = __webpack_require__(0);\n\n// EXTERNAL MODULE: ../comlib/src/debugger/xg.json\nvar xg = __webpack_require__(7);\n\n// EXTERNAL MODULE: ../comlib/src/debugger/Debugger.less\nvar Debugger = __webpack_require__(8);\nvar Debugger_default = /*#__PURE__*/__webpack_require__.n(Debugger);\n\n// CONCATENATED MODULE: ../comlib/src/debugger/Debugger.tsx\n\n\nfunction Debugger_Debugger({ env, inputs, outputs, slots }) {\n    //console.log('--Debugger---')\n    const my = Object(external_rxui_[\"useObservable\"])(class {\n        constructor() {\n            this.curVal = 0;\n            this.r = '随机值';\n        }\n    });\n    inputs['val'](val => {\n        console.log('-----', val);\n        my.curVal = val;\n    });\n    return (React.createElement(\"div\", { className: Debugger_default.a.debugger },\n        React.createElement(\"p\", null, my.r),\n        React.createElement(\"p\", null, my.curVal),\n        React.createElement(\"button\", { onClick: e => my.r = Math.random() + '' }, \"\\u5237\\u65B0\"),\n        React.createElement(\"button\", { onClick: e => outRandomNum(outputs) }, \"\\u8F93\\u51FA\\u968F\\u673A\\u6570\\u5B57\"),\n        React.createElement(\"button\", { onClick: e => outAndRtn(outputs) }, \"\\u8F93\\u51FA\\u6A21\\u62DF\\u5E76\\u663E\\u793A\\u8FD4\\u56DE\\u6570\\u636E\")));\n}\nfunction outRandomNum(outputs) {\n    outputs['randomNum'](Math.random());\n}\nfunction outAndRtn(outputs) {\n    outputs['randomNumAndRtn'](Math.random(), val => {\n        console.log(val);\n    });\n}\n\n// EXTERNAL MODULE: ../comlib/src/module/xg.json\nvar module_xg = __webpack_require__(9);\n\n// CONCATENATED MODULE: ../comlib/src/module/runtime.ts\n/* harmony default export */ var module_runtime = (function ({ env, slots }) {\n    if (env.runtime) {\n        const names = Object.keys(slots);\n        const slotName = names[0];\n        // Object.values(frames).forEach(frame => {\n        //   frame(void 0,slotName)\n        // })\n        return slots[slotName].render(null, slotName);\n    }\n});\n\n// EXTERNAL MODULE: ../comlib/src/module/data.json\nvar module_data = __webpack_require__(10);\n\n// EXTERNAL MODULE: ../comlib/src/if/xg.json\nvar if_xg = __webpack_require__(11);\n\n// EXTERNAL MODULE: ../comlib/src/if/IF.tsx\nvar IF = __webpack_require__(12);\n\n// EXTERNAL MODULE: ../comlib/src/for/xg.json\nvar for_xg = __webpack_require__(14);\n\n// EXTERNAL MODULE: ../comlib/src/for/for.less\nvar for_for = __webpack_require__(5);\nvar for_default = /*#__PURE__*/__webpack_require__.n(for_for);\n\n// CONCATENATED MODULE: ../comlib/src/for/For.tsx\n\n\nfunction For({ env, data, inputs, outputs, slots }) {\n    const myCtx = Object(external_rxui_[\"useObservable\"])(class {\n    });\n    Object(external_rxui_[\"useComputed\"])(() => {\n        inputs['datasource'](ds => {\n            console.log('For--inputs--datasource:', ds);\n            myCtx.dataSource = ds;\n        });\n    });\n    const rtRender = Object(external_rxui_[\"useComputed\"])(() => {\n        const rtn = [];\n        if (myCtx.dataSource && slots) {\n            myCtx.dataSource.forEach((data, idx) => {\n                console.log('For--curVal--datasource:', data);\n                rtn.push(React.createElement(\"div\", { key: idx }, slots['content'].render({\n                    index: idx,\n                    curVal: data\n                }, idx)));\n            });\n        }\n        return rtn;\n    });\n    return (React.createElement(\"div\", { className: `${for_default.a.for} ${for_default.a.forScrollY}`, style: {\n        // height: `${data.height}rpx`\n        } }, env.edit ? slots['content'].render() : rtRender));\n}\n\n// CONCATENATED MODULE: ../comlib/src/module-joiner/ModuleJoiner.ts\nfunction ModuleJoiner_Debugger({ env, data, inputs, outputs }) {\n    inputs['in'](val => {\n        env.runtime.curModule.outputs[data.outputId](val);\n    });\n}\n\n// EXTERNAL MODULE: ../comlib/src/module-joiner/xg.json\nvar module_joiner_xg = __webpack_require__(15);\n\n// EXTERNAL MODULE: ../comlib/src/dialog-inputs/xg.json\nvar dialog_inputs_xg = __webpack_require__(16);\n\n// CONCATENATED MODULE: ../comlib/src/dialog-inputs/runtime.ts\nfunction runtime_Debugger({ env, data, inputs, outputs }) {\n    inputs['commit'](val => {\n        if (val !== void 0) {\n            env.runtime.curWindow.outputs['commit'](val);\n        }\n        env.runtime.curWindow.destroy();\n    });\n    inputs['cancel'](val => {\n        if (val !== void 0) {\n            env.runtime.curWindow.outputs['cancel'](val);\n        }\n        env.runtime.curWindow.destroy();\n    });\n}\n\n// CONCATENATED MODULE: ../comlib/src/dialog-inputs/index.ts\n\n\n/* harmony default export */ var dialog_inputs = ({\n    xg: dialog_inputs_xg,\n    rt: runtime_Debugger\n});\n\n// EXTERNAL MODULE: ../comlib/src/dialog-proxy/xg.json\nvar dialog_proxy_xg = __webpack_require__(17);\n\n// EXTERNAL MODULE: ../comlib/src/dialog-proxy/runtime.less\nvar dialog_proxy_runtime = __webpack_require__(18);\nvar runtime_default = /*#__PURE__*/__webpack_require__.n(dialog_proxy_runtime);\n\n// CONCATENATED MODULE: ../comlib/src/dialog-proxy/runtime.tsx\n\n\nfunction dialog_proxy_runtime_Debugger({ env, data, inputs, outputs }) {\n    if (env.runtime) {\n        inputs['in'](val => {\n            env.runtime.curWindow.outputs['commit'](val);\n        });\n    }\n    const commit = Object(external_commonjs_React_commonjs2_React_amd_React_root_React_[\"useCallback\"])(() => {\n        if (env.runtime) {\n            outputs['commit'](1);\n            //env.runtime.curWindow.destroy()\n        }\n    }, []);\n    const cancel = Object(external_commonjs_React_commonjs2_React_amd_React_root_React_[\"useCallback\"])(() => {\n        if (env.runtime) {\n            outputs['cancel'](1);\n        }\n    }, []);\n    return (external_commonjs_React_commonjs2_React_amd_React_root_React_default.a.createElement(\"div\", { className: runtime_default.a.toolbar },\n        external_commonjs_React_commonjs2_React_amd_React_root_React_default.a.createElement(\"button\", { \"btn-commit\": 1, onClick: commit }, \"\\u786E\\u5B9A\"),\n        external_commonjs_React_commonjs2_React_amd_React_root_React_default.a.createElement(\"button\", { \"btn-cancel\": 1, onClick: cancel }, \"\\u53D6\\u6D88\")));\n}\n\n// CONCATENATED MODULE: ../comlib/src/dialog-proxy/editor.ts\n/* harmony default export */ var editor = ({\n    '@init'({ style }) {\n        style.position = 'fixed';\n        style.right = 0;\n        style.bottom = 0;\n    },\n    '*': [],\n    '[btn-commit]': {\n        title: '确定',\n        items: [\n            {\n                title: '标题',\n                type: 'text',\n                value: {\n                    get() {\n                        return '确定';\n                    },\n                    set() {\n                    }\n                }\n            },\n            {\n                title: '事件',\n                items: [\n                    {\n                        title: '点击',\n                        type: 'button',\n                        sameAs: 'shortcut',\n                        value: {\n                            set({ diagram }) {\n                                diagram.edit('commit');\n                            }\n                        }\n                    }\n                ]\n            }\n        ]\n    },\n    '[btn-cancel]': {\n        title: '取消',\n        items: [\n            {\n                title: '标题',\n                type: 'text',\n                value: {\n                    get() {\n                        return '确定';\n                    },\n                    set() {\n                    }\n                }\n            },\n            {\n                title: '事件',\n                items: [\n                    {\n                        title: '点击',\n                        type: 'button',\n                        sameAs: 'shortcut',\n                        value: {\n                            set({ diagram }) {\n                                diagram.edit('cancel');\n                            }\n                        }\n                    }\n                ]\n            }\n        ]\n    }\n});\n\n// CONCATENATED MODULE: ../comlib/src/dialog-proxy/index.ts\n\n\n\n/* harmony default export */ var dialog_proxy = ({\n    xg: dialog_proxy_xg,\n    rt: dialog_proxy_runtime_Debugger,\n    editors: editor\n});\n\n// CONCATENATED MODULE: ../comlib/src/index.ts\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst lib = {\n    id: 'xg-comlib',\n    title: 'XGraph核心组件库',\n    author: 'CMJ',\n    icon: '',\n    version: '1.0.1',\n    comAray: [\n        merge({\n            xg: xg,\n            rt: Debugger_Debugger\n        }),\n        merge({\n            xg: module_xg,\n            rt: module_runtime,\n            data: module_data\n        }),\n        merge({\n            xg: if_xg,\n            rt: IF[\"a\" /* default */]\n        }),\n        merge({\n            xg: for_xg,\n            rt: For\n        }),\n        merge({\n            xg: module_joiner_xg,\n            rt: ModuleJoiner_Debugger\n        }),\n        merge(dialog_inputs),\n        merge(dialog_proxy)\n    ],\n    //visible: true,\n    visible: false\n};\n/* harmony default export */ var src = (lib);\nfunction getCom(namespace) {\n    return lib.comAray.find(com => com.namespace === namespace);\n}\nfunction merge({ xg, rt, data, editors, assistence }) {\n    return Object.assign(xg, {\n        runtime: rt,\n        data,\n        editors,\n        assistence\n    });\n}\n\n// EXTERNAL MODULE: ./src/skin.less\nvar skin = __webpack_require__(1);\nvar skin_default = /*#__PURE__*/__webpack_require__.n(skin);\n\n// CONCATENATED MODULE: ./src/RenderReact.tsx\n\n\n\n\n\nconst RT_MAPS = {};\nfunction RenderReact({ mainModule, comDefs, inputParams, output, runtimeCfg, logs }) {\n    const nComDefs = Object.assign({}, comDefs);\n    const xgComs = src.comAray;\n    if (xgComs) {\n        xgComs.forEach(def => {\n            nComDefs[def.namespace + '@' + def.version] = def.runtime;\n        });\n    }\n    const { frame, slot } = Object(external_commonjs_React_commonjs2_React_amd_React_root_React_[\"useMemo\"])(() => {\n        const { frame, slot } = Object(external_rxui_[\"observable\"])(mainModule);\n        const runner = executor_compile(frame, {\n            // extComDef,\n            // envVars,\n            node(node) {\n                return {\n                    render(scopePath, frameLable, frames, curScope) {\n                        const io = createIO(node, {\n                            output() {\n                                Object(external_rxui_[\"igonreObservableBefore\"])();\n                            }\n                        });\n                        RT_MAPS[node.runtime.id] = { scopePath, frameLable, frames, io };\n                        const rtDef = node.runtime.def;\n                        const rtType = rtDef.rtType;\n                        if (rtType && rtType.match(/js/gi)) { //逻辑组件\n                            const rtCfg = Object.assign({\n                                get curModule() {\n                                    const module = node.parent.parent;\n                                    if (module) {\n                                        const frame = node.parent;\n                                        const outPins = frame.outputPins;\n                                        const outputs = {};\n                                        outPins.forEach(pin => {\n                                            outputs[pin.id] = (val, callback) => {\n                                                pin._exe(curScope, val, callback);\n                                            };\n                                        });\n                                        return {\n                                            outputs\n                                        };\n                                    }\n                                }\n                            }, runtimeCfg);\n                            const ns = rtDef.namespace + '@' + rtDef.version;\n                            const comRt = nComDefs[ns];\n                            if (comRt && typeof comRt === 'function') {\n                                comRt({\n                                    data: Object(external_rxui_[\"clone\"])(node.runtime.model.data),\n                                    inputs: io.inputs,\n                                    outputs: io.outputs,\n                                    env: { runtime: rtCfg }\n                                });\n                            }\n                            else {\n                                throw new Error(`未找到组件(${ns})`);\n                            }\n                        }\n                        return io;\n                    }\n                };\n            }, pin(pin) {\n                const comRT = pin.parent.runtime ? pin.parent.runtime : void 0;\n                return {\n                    exe(value) {\n                        if (pin.type.match(/^ext$/gi)) {\n                            if (pin.direction.match(/^input|inner-output$/gi)) {\n                                if (pin.hostId === 'show') {\n                                    pin.parent.runtime.model.style.display = 'block';\n                                }\n                                else if (pin.hostId === 'hide') {\n                                    pin.parent.runtime.model.style.display = 'none';\n                                }\n                            }\n                        }\n                        const strVal = typeof value === 'object' && value ?\n                            JSON.stringify(value) :\n                            String(value);\n                        if (comRT) {\n                            if (logs) {\n                                if (typeof logs.info === 'function') {\n                                    setTimeout(v => {\n                                        logs.info({\n                                            catelog: '程序运行',\n                                            content: `${comRT.title} | ${pin.title} ${pin.direction == 'input' || pin.direction == 'inner-input' ? '传入' : '传出'} ${strVal}`,\n                                            focus() {\n                                                comRT._focus = true;\n                                            },\n                                            blur() {\n                                                comRT._focus = void 0;\n                                            }\n                                        });\n                                    });\n                                }\n                            }\n                        }\n                    }\n                };\n            }\n        });\n        runner.run()({ params: inputParams });\n        return { frame, slot };\n    }, []);\n    const jsx = [];\n    slot.comAry.forEach((node) => {\n        jsx.push(React.createElement(RenderCom, { key: node.runtime.id, node: node, comDefs: nComDefs, runtimeCfg: runtimeCfg }));\n    });\n    return jsx;\n}\nfunction RenderCom({ node, comDefs, runtimeCfg }) {\n    const { slots: comSlots, runtime } = node;\n    const rtType = runtime.def.rtType;\n    if (rtType && rtType.match(/js/gi)) { //逻辑组件\n        return;\n    }\n    const nodeModel = runtime.model;\n    const comRuntime = comDefs[runtime.def.namespace + '@' + runtime.def.version];\n    const rt = RT_MAPS[runtime.id];\n    //\n    // if (!comRuntime) {\n    //   debugger\n    //   return\n    // }\n    //if (comRuntime) {\n    const io = rt.io; //inputs outpus\n    const slots = {};\n    if (comSlots) {\n        comSlots.forEach(slot => {\n            slots[slot.id] = {\n                id: slot.id,\n                title: slot.title,\n                //comAry:slot.comAry,\n                render() {\n                    const { frames } = RT_MAPS[runtime.id];\n                    const fn = frames[slot.id];\n                    if (typeof fn === 'function') {\n                        fn(); //兼容之前的非框图\n                    }\n                    const comAry = slot.comAry;\n                    return (React.createElement(\"section\", { className: calSlotStyle(slot) }, comAry.map(com => {\n                        return (React.createElement(RenderCom, { key: com.runtime.id, node: com, comDefs: comDefs, runtimeCfg: runtimeCfg }));\n                    })));\n                }\n            };\n        });\n    }\n    const style = nodeModel.style;\n    return (React.createElement(\"div\", { id: node.runtime.id, style: {\n            width: style.width || '100%',\n            display: style.display,\n            paddingTop: style.marginTop,\n            paddingBottom: style.marginBottom,\n            paddingLeft: style.marginLeft,\n            paddingRight: style.marginRight,\n        }, className: `${node.runtime._focus ? skin_default.a.debugFocus : ''}` }, comRuntime({\n        slots: slots,\n        env: { runtime: runtimeCfg },\n        data: nodeModel.data,\n        style,\n        inputs: io.inputs,\n        outputs: io.outputs,\n    })));\n    //}\n}\nfunction calSlotStyle(model) {\n    var _a, _b;\n    const rtn = [skin_default.a.slot];\n    const style = model.style;\n    if (style) {\n        if (((_a = style.layout) === null || _a === void 0 ? void 0 : _a.toLowerCase()) == 'flex-column') {\n            rtn.push(skin_default.a.lyFlexColumn);\n        }\n        else if (((_b = style.layout) === null || _b === void 0 ? void 0 : _b.toLowerCase()) == 'flex-row') {\n            rtn.push(skin_default.a.lyFlexRow);\n        }\n        const justifyContent = style.justifyContent;\n        if (justifyContent) {\n            if (justifyContent.toUpperCase() === 'FLEX-START') {\n                rtn.push(skin_default.a.justifyContentFlexStart);\n            }\n            else if (justifyContent.toUpperCase() === 'CENTER') {\n                rtn.push(skin_default.a.justifyContentFlexCenter);\n            }\n            else if (justifyContent.toUpperCase() === 'FLEX-END') {\n                rtn.push(skin_default.a.justifyContentFlexFlexEnd);\n            }\n            else if (justifyContent.toUpperCase() === 'SPACE-AROUND') {\n                rtn.push(skin_default.a.justifyContentFlexSpaceAround);\n            }\n            else if (justifyContent.toUpperCase() === 'SPACE-BETWEEN') {\n                rtn.push(skin_default.a.justifyContentFlexSpaceBetween);\n            }\n        }\n        const alignItems = style.alignItems;\n        if (alignItems) {\n            if (alignItems.toUpperCase() === 'FLEX-START') {\n                rtn.push(skin_default.a.alignItemsFlexStart);\n            }\n            else if (alignItems.toUpperCase() === 'CENTER') {\n                rtn.push(skin_default.a.alignItemsFlexCenter);\n            }\n            else if (alignItems.toUpperCase() === 'FLEX-END') {\n                rtn.push(skin_default.a.alignItemsFlexFlexEnd);\n            }\n        }\n    }\n    return rtn.join(' ');\n}\n\n// CONCATENATED MODULE: ./index.ts\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///24\n")}])}));